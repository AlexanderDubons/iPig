
&НаСервере
Процедура КарточкаНаСервере(ТабДок)  
	Записать();
	Макет = РегистрыСведений.КарточкаСвиноматки.ПолучитьМакет("Карточка");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.НомерЖивотного 	= Запись.НомерЖивотного;
	ОбластьШапка.Параметры.КодПороды 		= Запись.КодПороды.Код;
	ОбластьШапка.Параметры.Порода	 		= Запись.КодПороды.Наименование;
	
	
	//дата последнего осеменения + 117 
	
	//Для Каждого Стр из ТЧСлучка Цикл
	//	ДатаПредполагаемогоОпороса = Стр.ДатаСлучка;
	//КонецЦикла;
	//КоличествоДней = 117;
	//ОбластьШапка.Параметры.ДатаПредполагаемогоОпороса = ДатаПредполагаемогоОпороса + КоличествоДней * 60 * 60 * 24;    
	КоличествоСтрок = ТЧОбщая.Количество();	  
	ДатаПредполагаемогоОпороса = '00010101000000';
	Если КоличествоСтрок > 0 Тогда
		ПоследняяСтрока = ТЧОбщая[КоличествоСтрок - 1]; 
		Если ПоследняяСтрока.ДатаАборта = '00010101000000' Тогда
			Если ПоследняяСтрока.ДатаОпороса = '00010101000000'  И ПоследняяСтрока.ДатаСлучка <> '00010101000000' Тогда
				ДатаПредполагаемогоОпороса =  ПоследняяСтрока.ДатаСлучка + _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 *60); 
			Иначе 
				ДатаПредполагаемогоОпороса =  ПоследняяСтрока.ДатаОпороса;
			КонецЕсли;                   
		Иначе
			ДатаПредполагаемогоОпороса = '00010101000000';
		КонецЕсли;
	КонецЕсли;
	ОбластьШапка.Параметры.ДатаПредполагаемогоОпороса = ДатаПредполагаемогоОпороса;  
	МассивДат = ТЧОбщая.Выгрузить(,"ДатаСлучка");
	МассивДат.Сортировать("ДатаСлучка УБЫВ");   
	Если МассивДат.Количество() > 0 Тогда
		//ОбластьШапка.Параметры.Группа = НеделяГода(МассивДат[0].ДатаСлучка) + Константы.КорректировкаНачалаГода.Получить();  
		ОбластьШапка.Параметры.Группа = _НастройкиКонфигурацииНаСервере.РасчетНомераНедели(МассивДат[0].ДатаСлучка,Константы.НачалоОтсчетаНомераНедели.Получить());
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьШапка);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьСтрокаТаблицы.Параметры.Период = Запись.Период;
	ОбластьСтрокаТаблицы.Параметры.Вес = Запись.МассаВвод; 
	ОбластьСтрокаТаблицы.Параметры.ДатаРождения = Запись.ДатаРождения;
	ОбластьСтрокаТаблицы.Параметры.КодПороды = Запись.КодПороды;
	ОбластьСтрокаТаблицы.Параметры.УшнойВыщип = Запись.УшнойВыщип;
	ОбластьСтрокаТаблицы.Параметры.IDНомер = Запись.IDНомер;	
	ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоМать = Запись.НомерЖивотногоМать;
	ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоОтец = Запись.НомерЖивотногоОтец;
	//ОбластьСтрокаТаблицы.Параметры.Место = ;
	ТабДок.Вывести(ОбластьСтрокаТаблицы);
	
	ОбластьШапкаСобытия = Макет.ПолучитьОбласть("ШапкаСобытия");
	ТабДок.Вывести(ОбластьШапкаСобытия);    
	
	ОбластьСтрокаСобытия = Макет.ПолучитьОбласть("СтрокаСобытия");	 
	ВесОтъемов 			= 0;
	КоличествоОтъемов 	= 0;

	Для Каждого ВыборкаДетальныеЗаписи ИЗ ТЧОбщая Цикл
		ОбластьСтрокаСобытия.Параметры.Номер = ВыборкаДетальныеЗаписи.НомерОпороса;
		ОбластьСтрокаСобытия.Параметры.ДатаСлучка = ВыборкаДетальныеЗаписи.ДатаСлучка;
		ОбластьСтрокаСобытия.Параметры.НомерЖивотногоХряк = ВыборкаДетальныеЗаписи.НомерЖивотногоХряк;
		ОбластьСтрокаСобытия.Параметры.КодРаботника = ВыборкаДетальныеЗаписи.Работник;   
		ОбластьСтрокаСобытия.Параметры.ДатаОпороса = ВыборкаДетальныеЗаписи.ДатаОпороса; 
		Если ВыборкаДетальныеЗаписи.ДатаСлучка <> Дата(1,1,1)Тогда
			ОбластьСтрокаСобытия.Параметры.ПДатаОпороса = ВыборкаДетальныеЗаписи.ДатаСлучка + _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 *60);
		Иначе
			ОбластьСтрокаСобытия.Параметры.ПДатаОпороса = "";	
		КонецЕсли;
		ОбластьСтрокаСобытия.Параметры.Живорожденные = ВыборкаДетальныеЗаписи.Живорожденные;
		ОбластьСтрокаСобытия.Параметры.Мертвые = ВыборкаДетальныеЗаписи.Мертвые;
		ОбластьСтрокаСобытия.Параметры.Слаборожденные = ВыборкаДетальныеЗаписи.Слаборожденные;
		ОбластьСтрокаСобытия.Параметры.Муммии = ВыборкаДетальныеЗаписи.Муммии;
		ОбластьСтрокаСобытия.Параметры.Свинки = ВыборкаДетальныеЗаписи.Свинки;
		ОбластьСтрокаСобытия.Параметры.ДатаОтъема = ВыборкаДетальныеЗаписи.ДатаОтъема;
		ОбластьСтрокаСобытия.Параметры.КоличествоОтъемышей = ВыборкаДетальныеЗаписи.КоличествоОтъемышей;
		ОбластьСтрокаСобытия.Параметры.ПодсосныйПериод = ВыборкаДетальныеЗаписи.ПодсосныйПериод;
		ОбластьСтрокаСобытия.Параметры.ПустыеКормодни = ВыборкаДетальныеЗаписи.ПустыеДни; 
		Если ВыборкаДетальныеЗаписи.СреднийВес > 0 Тогда 
			ВесОтъемов 			= ВесОтъемов + ВыборкаДетальныеЗаписи.СреднийВес;
			КоличествоОтъемов 	= КоличествоОтъемов + 1;
		КонецЕсли;
		ТабДок.Вывести(ОбластьСтрокаСобытия);
	КонецЦикла;  
	
	ОбластьСтрокаТаблицыПустая = Макет.ПолучитьОбласть("СтрокаТаблицыПусто");	
	ТабДок.Вывести(ОбластьСтрокаТаблицыПустая);   
	
	ОбластьШапкаОхота = Макет.ПолучитьОбласть("ШапкаОхота");
	ТабДок.Вывести(ОбластьШапкаОхота);
	
	ОбластьСтрокаОхота = Макет.ПолучитьОбласть("СтрокаОхота"); 
	Номер = 1;
	Для Каждого СтрЗапись ИЗ ТЧЖурналОхот Цикл     
		ОбластьСтрокаОхота.Параметры.Номер     = Номер;
		ОбластьСтрокаОхота.Параметры.ДатаОхота = СтрЗапись.ДатаСобытия; 
		Номер = Номер + 1;   
		ТабДок.Вывести(ОбластьСтрокаОхота);
	КонецЦикла;
	
	ОбластьДляЗаписей = Макет.ПолучитьОбласть("ДляЗаписей");
	ТабДок.Вывести(ОбластьДляЗаписей);     

	
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура Карточка(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	КарточкаНаСервере(ТабДок);
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать()
	
КонецПроцедуры

&НаСервере
Процедура КарточкаПородаНаСервере(ТабДок)
	Макет = РегистрыСведений.КарточкаСвиноматки.ПолучитьМакет("КарточкаНаОпорос"); 
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.НомерЖивотного = Запись.НомерЖивотного;   
	ОбластьШапка.Параметры.КодПороды = Запись.КодПороды;
	//дата последнего осеменения + 117 
	
	//Для Каждого Стр из ТЧСлучка Цикл
	//	ДатаПредполагаемогоОпороса = Стр.ДатаСлучка;
	//КонецЦикла;
	//КоличествоДней = 117;
	//ОбластьШапка.Параметры.ДатаПредполагаемогоОпороса = ДатаПредполагаемогоОпороса + КоличествоДней * 60 * 60 * 24;    
	
	ТабДок.Вывести(ОбластьШапка);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьСтрокаТаблицы.Параметры.Период = Запись.Период;
	ОбластьСтрокаТаблицы.Параметры.Вес = Запись.МассаВвод; 
	ОбластьСтрокаТаблицы.Параметры.ДатаРождения = Запись.ДатаРождения;
	ОбластьСтрокаТаблицы.Параметры.КодПороды = Запись.КодПороды;
	ОбластьСтрокаТаблицы.Параметры.УшнойВыщип = Запись.УшнойВыщип;
	ОбластьСтрокаТаблицы.Параметры.IDНомер = Запись.IDНомер;	
	ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоМать = Запись.НомерЖивотногоМать;
	ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоОтец = Запись.НомерЖивотногоОтец;
	//ОбластьСтрокаТаблицы.Параметры.Место = ;
	ТабДок.Вывести(ОбластьСтрокаТаблицы);
	
	ОбластьШапкаСобытия = Макет.ПолучитьОбласть("ШапкаСобытия");
	ТабДок.Вывести(ОбластьШапкаСобытия);    
	ВесОтъемов 			= 0; 
	КоличествоОтъемов 	= 0;
	ОбластьСтрокаСобытия = Макет.ПолучитьОбласть("СтрокаСобытия");	
		Для Каждого ВыборкаДетальныеЗаписи ИЗ ТЧОбщая Цикл
		ОбластьСтрокаСобытия.Параметры.Номер = ВыборкаДетальныеЗаписи.НомерОпороса;
		ОбластьСтрокаСобытия.Параметры.ДатаСлучка = ВыборкаДетальныеЗаписи.ДатаСлучка;
		ОбластьСтрокаСобытия.Параметры.НомерЖивотногоХряк = ВыборкаДетальныеЗаписи.НомерЖивотногоХряк;
		ОбластьСтрокаСобытия.Параметры.КодРаботника = ВыборкаДетальныеЗаписи.Работник;   
		ОбластьСтрокаСобытия.Параметры.ДатаОпороса = ВыборкаДетальныеЗаписи.ДатаОпороса; 
		Если ВыборкаДетальныеЗаписи.ДатаСлучка <> Дата(1,1,1)Тогда
			ОбластьСтрокаСобытия.Параметры.ПДатаОпороса = ВыборкаДетальныеЗаписи.ДатаСлучка + _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 *60);
		Иначе
			ОбластьСтрокаСобытия.Параметры.ПДатаОпороса = "";	
		КонецЕсли;       
		
		ОбластьСтрокаСобытия.Параметры.Живорожденные = ВыборкаДетальныеЗаписи.Живорожденные;
		ОбластьСтрокаСобытия.Параметры.Мертвые = ВыборкаДетальныеЗаписи.Мертвые;
		ОбластьСтрокаСобытия.Параметры.Слаборожденные = ВыборкаДетальныеЗаписи.Слаборожденные;
		ОбластьСтрокаСобытия.Параметры.Муммии = ВыборкаДетальныеЗаписи.Муммии;
		ОбластьСтрокаСобытия.Параметры.Свинки = ВыборкаДетальныеЗаписи.Свинки;
		ОбластьСтрокаСобытия.Параметры.ДатаОтъема = ВыборкаДетальныеЗаписи.ДатаОтъема;
		ОбластьСтрокаСобытия.Параметры.КоличествоОтъемышей = ВыборкаДетальныеЗаписи.КоличествоОтъемышей;
		ОбластьСтрокаСобытия.Параметры.ПодсосныйПериод = ВыборкаДетальныеЗаписи.ПодсосныйПериод;
		ОбластьСтрокаСобытия.Параметры.ПустыеКормодни = ВыборкаДетальныеЗаписи.ПустыеДни;  
		ОбластьСтрокаСобытия.Параметры.Мачеха	= ВыборкаДетальныеЗаписи.Мачеха;
		Если ВыборкаДетальныеЗаписи.СреднийВес > 0 Тогда 
			ВесОтъемов 			= ВесОтъемов + ВыборкаДетальныеЗаписи.СреднийВес;
			КоличествоОтъемов 	= КоличествоОтъемов + 1;
		КонецЕсли;
		ТабДок.Вывести(ОбластьСтрокаСобытия);
	КонецЦикла; 	
	ОбластьШапкаИтого = Макет.ПолучитьОбласть("ШапкаИтого");
	ТабДок.Вывести(ОбластьШапкаИтого);
	
	ОбластьСтрокаИтого = Макет.ПолучитьОбласть("СтрокаИтого");	
	Дата = ТекущаяДата();
	Живорожденные = 0;
	Мертвые = 0;
	КоличествоОтъемышей = 0;    
	НомерОпороса = Запись.НомерОпороса;
	ПериодЛактации = 0;
	ПодсосныйПериод = 0; 
	Если КоличествоОтъемов > 0 Тогда
		ОбластьСтрокаИтого.Параметры.ВесОтъема = ОКР(ВесОтъемов / КоличествоОтъемов,2); 
	КонецЕсли;                                                                
	ОбластьСтрокаИтого.Параметры.ОтнятоНаСвиноматкуВГод 		= Запись.ОтнятоПоросятНаСвиноматкуВГод;
	ОбластьСтрокаИтого.Параметры.ОпоросовНаСвиноматкуВГод 		= Запись.ОпоросовНаСвиноматкуВГод;
	ОбластьСтрокаИтого.Параметры.ЖиворожденныхНаСвиноматкуВГод 	= Запись.ЖиворожденныхНаСвиноматкуВГод;   
	ОбластьСтрокаИтого.Параметры.ЖиворожденныхНаОпорос 		= Запись.ЖиворожденныхНаОпорос;
	ОбластьСтрокаИтого.Параметры.МертворожденныхНаОпорос 	= Запись.МертворожденныхНаОпорос;
	ОбластьСтрокаИтого.Параметры.СупоросныйПериод 			= Запись.СупоросныхДнейНаОпорос;
	ОбластьСтрокаИтого.Параметры.ПодсосныйПериод 			= Запись.ПодсосныхДнейНаОпорос;
	ОбластьСтрокаИтого.Параметры.ОтнятоНаОпорос 			= Запись.ОтнятоНаОпорос;
	ОбластьСтрокаИтого.Параметры.НепродуктивныхДней 		= Запись.ПустыхДнейНаОпорос;
	ТабДок.Вывести(ОбластьСтрокаИтого); 
	
	//ОбластьТекст = Макет.ПолучитьОбласть("Текст");
	//ТабДок.Вывести(ОбластьТекст);
	
	ОбластьШапкаЛекарство = Макет.ПолучитьОбласть("ШапкаЛекарство");
	ТабДок.Вывести(ОбластьШапкаЛекарство);  
	
	ОбластьСтрокаЛекарство = Макет.ПолучитьОбласть("СтрокаЛекарство");    
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 7
	               |	Медицина.Период КАК Дата,
	               |	Медицина.НомерЖивотного КАК НомерЖивотного,
	               |	Медицина.ДатаВвода КАК ДатаВвода,
	               |	Медицина.Медикаменты КАК Медикаменты,
	               |	Медицина.Диагноз КАК Диагноз,
	               |	Медицина.Сумма КАК Сумма,
	               |	Медицина.Количество КАК Количество,
	               |	Медицина.Отметка КАК Отметка,
	               |	Медицина.Медикаменты.Код КАК Код
	               |ИЗ
	               |	РегистрСведений.Медицина КАК Медицина
	               |ГДЕ
	               |	Медицина.НомерЖивотного = &НомерЖивотного
	               |	И Медицина.ДатаВвода = &ДатаВвода
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр ИЗ Результат Цикл   
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаЛекарство.Параметры,Стр);
		ТабДок.Вывести(ОбластьСтрокаЛекарство); 
		
	КонецЦикла;
	
	ОбластьДополнительно = Макет.ПолучитьОбласть("Дополнительно");
	ОбластьДополнительно.Параметры.ДатаВыбытие = Запись.ДатаВыбытие;  
	ОбластьДополнительно.Параметры.ТипВыбытие = Запись.ТипВыбытие;
	ОбластьДополнительно.Параметры.МассаВыбытие = Запись.МассаВыбытие;
	ТабДок.Вывести(ОбластьДополнительно);  
	
	ОбластьСтрокаДополнительно = Макет.ПолучитьОбласть("СтрокаДополнительно");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 7
	               |	ДополнителнаяРегистрация.Период КАК Дата,
	               |	ДополнителнаяРегистрация.НомерЖивотного КАК НомерЖивотного,
	               |	ДополнителнаяРегистрация.ДатаВвода КАК ДатаВвода,
	               |	ДополнителнаяРегистрация.Название КАК Название,
	               |	ДополнителнаяРегистрация.Название.Код КАК Код
	               |ИЗ
	               |	РегистрСведений.ДополнителнаяРегистрация КАК ДополнителнаяРегистрация
	               |ГДЕ
	               |	ДополнителнаяРегистрация.НомерЖивотного = &НомерЖивотного
	               |	И ДополнителнаяРегистрация.ДатаВвода = &ДатаВвода
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр ИЗ Результат Цикл    
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаДополнительно.Параметры,Стр);
		ТабДок.Вывести(ОбластьСтрокаДополнительно); 
	КонецЦикла;
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	
	
	
	//ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	//ОбластьШапка.Параметры.НомерЖивотного = Запись.НомерЖивотного; 
	//ОбластьШапка.Параметры.Отец = Строка(Запись.НомерЖивотногоОтец) + "("+ Строка(?(Запись.НазваниеПородыОтец = Справочники.Порода.ПустаяСсылка(),"",Запись.НазваниеПородыОтец)+ ")");
	//ОбластьШапка.Параметры.Мать = Строка(Запись.НомерЖивотногоМать) + "("+ Строка(?(Запись.НазваниеПородыМать = Справочники.Порода.ПустаяСсылка(),"",Запись.НазваниеПородыМать)+ ")");
	//ОбластьШапка.Параметры.ДатаРождения = Запись.ДатаРождения;
	//ОбластьШапка.Параметры.ДатаВвода = Запись.Период;
	//ОбластьШапка.Параметры.IDНомер = Запись.IDНомер;
	//ОбластьШапка.Параметры.НазваниеПороды = Запись.КодПороды.Наименование;
	//ОбластьШапка.Параметры.КодПороды = Запись.КодПороды;
	//ТабДок.Вывести(ОбластьШапка);
	//
	//ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	//ТабДок.Вывести(ОбластьШапкаТаблицы);
	//
	//ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы"); 	
	////////                                                         
	//Для Каждого СтрОпорос ИЗ ТЧОпоросы Цикл                                          
	//	ДанныеСлучки = ПолучитьДанныеСлучкиНаСервере(СтрОпорос.НомерОпороса);  
	//	ДанныеОтъема = ПолучитьДанныеОтъемНаСервере(СтрОпорос.НомерОпороса);
	//	ОбластьСтрокаТаблицы.Параметры.НомерОпороса 		= СтрОпорос.НомерОпороса;
	//	ОбластьСтрокаТаблицы.Параметры.ДатаСлучка 			= ДанныеСлучки.ДатаСлучка; 
	//	ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоХряк 	= ДанныеСлучки.НомерЖивотногоХряк;
	//	ОбластьСтрокаТаблицы.Параметры.КодПороды 			= ДанныеСлучки.НазваниеПородыХряк;
	//	ОбластьСтрокаТаблицы.Параметры.Работник 			= ДанныеСлучки.Работник;
	//	ОбластьСтрокаТаблицы.Параметры.ДатаОпороса 			= СтрОпорос.ДатаОпороса;	
	//	ОбластьСтрокаТаблицы.Параметры.Живорожденные 		= СтрОпорос.Живорожденные;
	//	ОбластьСтрокаТаблицы.Параметры.Мертвые 				= СтрОпорос.Мертвые;	
	//	ОбластьСтрокаТаблицы.Параметры.Слаборожденные 		= СтрОпорос.Слаборожденные;	
	//	ОбластьСтрокаТаблицы.Параметры.Муммии 				= СтрОпорос.Муммии;
	//	ОбластьСтрокаТаблицы.Параметры.ДатаОтъема 			= ДанныеОтъема.ДатаОтъема;	
	//	ОбластьСтрокаТаблицы.Параметры.КоличествоОтъемышей 	= ДанныеОтъема.КоличествоОтъемышей; 
	//	Если ДанныеОтъема.КоличествоОтъемышей > 0  Тогда
	//		ОбластьСтрокаТаблицы.Параметры.СреднийВес 			= Окр(ДанныеОтъема.МассаВсего / ДанныеОтъема.КоличествоОтъемышей,3);	
	//		ОбластьСтрокаТаблицы.Параметры.Мачеха 				= ДанныеОтъема.Мачеха; 
	//	Иначе
	//		ОбластьСтрокаТаблицы.Параметры.СреднийВес 			= 0;
	//		ОбластьСтрокаТаблицы.Параметры.Мачеха 				= ДанныеОтъема.Мачеха;
	//	КонецЕсли;
	//	//////
	//	ТабДок.Вывести(ОбластьСтрокаТаблицы);  
	//КонецЦикла;
	//
	//ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьДанныеСлучкиНаСервере(НомерОпороса)
	ПараметрыОтбора = Новый Структура("НомерОпороса",НомерОпороса);
	НайденныеСтроки = ТЧСлучка.НайтиСтроки(ПараметрыОтбора);
	Возврат НайденныеСтроки[0];
КонецФункции  

&НаСервере
Функция ПолучитьДанныеОтъемНаСервере(НомерОпороса)
	ПараметрыОтбора = Новый Структура("НомерОпороса",НомерОпороса);
	НайденныеСтроки = ТЧОтъем.НайтиСтроки(ПараметрыОтбора);
	Возврат НайденныеСтроки[0];
КонецФункции

&НаКлиенте
Процедура КарточкаПорода(Команда)
	ТабДок = Новый ТабличныйДокумент;
	КарточкаПородаНаСервере(ТабДок);
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать()
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	Если Запись.Период <> НачалоДня(Запись.Период) Тогда  
		Запись.Период = НачалоДня(Запись.Период) 	
	КонецЕсли;
	ПеречитатьДанныеНаСервере();
	Если Параметры.Свойство("ФормаОткрыта")  Тогда
		Если Параметры.ФормаОткрыта Тогда 
			Открытие = Истина; 
		Иначе
			Открытие = Ложь;
		КонецЕсли; 
	КонецЕсли;
	//ПолучитьДанныеВакцинацииНаСервере(); 	
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеНаСервере()
	//	ПолучитьКоличествоОпоросовНаСервере(); 

	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеОпоросНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧОпоросы);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеСлучкаНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧСлучка);	
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеСупоросностьНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧСупоросность,Запись.НомерОпороса);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеАбортаНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧАборт,Запись.НомерОпороса);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеПодсосныеПоросятаНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧПодсосныеПоросята);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеОтъемаНаСервере(Запись.НомерЖивотного,Запись.Период, ТЧОтъем); 
	РегистрыСведений.КарточкаСвиноматки.ПолучитьКоличествоОпоросовНаСервере(Запись.НомерЖивотного,Запись.Период,Запись.НомерОпороса); 
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеБракНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧБрак);
	
КонецПроцедуры   

#Область ПроцедурыПеренесенныеВМодульМенеджера
//&НаСервере
//Процедура ПолучитьДанныеОпоросНаСервере()
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст ="ВЫБРАТЬ
//	|	ЖурналОпороса.Период КАК ДатаОпороса,
//	|	&Статус КАК Статус,
//	|	ЖурналОпороса.НомерОпороса КАК НомерОпороса,
//	|	ЖурналОпороса.Живорожденные КАК Живорожденные,
//	|	ЖурналОпороса.Мертвые КАК Мертвые,
//	|	ЖурналОпороса.Слаборожденные КАК Слаборожденные,
//	|	ЖурналОпороса.Муммии КАК Муммии,
//	|	ЖурналОпороса.Свинки КАК Свинки,
//	|	ЖурналОпороса.МассаВсего КАК МассаВсего,
//	|	ЖурналОпороса.СреднийВес КАК СреднийВес,
//	|	ЖурналОпороса.ПереведеноПоросят КАК ПереведеноПоросят,
//	|	ЖурналОпороса.IDГнезда КАК IDГнезда
//	|ПОМЕСТИТЬ ВТДанные
//	|ИЗ
//	|	РегистрСведений.ЖурналОпороса КАК ЖурналОпороса
//	|ГДЕ
//	|	ЖурналОпороса.НомерЖивотного = &НомерЖивотного
//	|	И ЖурналОпороса.ДатаВвода = &ДатаВвода
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	ДатаОпороса
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТДанные.ДатаОпороса КАК ДатаОпороса,
//	|	ВТДанные.Статус КАК Статус,
//	|	ВТДанные.НомерОпороса КАК НомерОпороса,
//	|	АВТОНОМЕРЗАПИСИ() КАК Номер,
//	|	ВТДанные.ПереведеноПоросят КАК ПереведеноПоросят,
//	|	ВТДанные.СреднийВес КАК СреднийВес,
//	|	ВТДанные.МассаВсего КАК МассаВсего,
//	|	ВТДанные.Свинки КАК Свинки,
//	|	ВТДанные.Муммии КАК Муммии,
//	|	ВТДанные.Слаборожденные КАК Слаборожденные,
//	|	ВТДанные.Мертвые КАК Мертвые,
//	|	ВТДанные.Живорожденные КАК Живорожденные,
//	|	ВТДанные.IDГнезда КАК IDГнезда
//	|ПОМЕСТИТЬ ВТСорт
//	|ИЗ
//	|	ВТДанные КАК ВТДанные
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТСорт.ДатаОпороса КАК ДатаОпороса,
//	|	ВТСорт.Статус КАК Статус,
//	|	ВЫБОР
//	|		КОГДА ВТСорт.НомерОпороса = 0
//	|			ТОГДА ВТСорт.Номер
//	|		ИНАЧЕ ВТСорт.НомерОпороса
//	|	КОНЕЦ КАК НомерОпороса,
//	|	ВТСорт.Живорожденные КАК Живорожденные,
//	|	ВТСорт.Мертвые КАК Мертвые,
//	|	ВТСорт.Слаборожденные КАК Слаборожденные,
//	|	ВТСорт.Муммии КАК Муммии,
//	|	ВТСорт.Свинки КАК Свинки,
//	|	ВТСорт.МассаВсего КАК МассаВсего,
//	|	ВТСорт.СреднийВес КАК СреднийВес,
//	|	ВТСорт.ПереведеноПоросят КАК ПереведеноПоросят,
//	|	ВТСорт.IDГнезда КАК IDГнезда
//	|ИЗ
//	|	ВТСорт КАК ВТСорт";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);      
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период); 
//	Запрос.УстановитьПараметр("Статус",Перечисления.Статус.Супоросные); 
//	//Запрос.УстановитьПараметр("ОценкаСлучки",Перечисления.ОценкаСлучки.Хорошо);
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	ТЧОпоросы.Очистить();
//	ТЧОпоросы.Загрузить(РезультатЗапроса); 
//	
//	Для каждого Стр из ТЧОпоросы Цикл
//		НаборЗаписей = РегистрыСведений.ЖурналОпороса.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);    
//		НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
//		НаборЗаписей.Отбор.Период.Установить(Стр.ДатаОпороса);
//		НаборЗаписей.Прочитать(); 
//		Для Каждого Записи Из НаборЗаписей Цикл
//			Записи.НомерОпороса = Стр.НомерОпороса;  
//			Записи.Период = Стр.ДатаОпороса;
//		КонецЦикла;  	
//		НаборЗаписей.Записать();  
//	КонецЦикла;
//	
//	
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПолучитьДанныеСлучкаНаСервере()
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	ТЧСлучка.Очистить();
//	Запрос = Новый Запрос;
//	Запрос.Текст ="ВЫБРАТЬ
//	|	ЖурналОсеменения.Период КАК ДатаСлучка,
//	|	ЖурналОсеменения.НомерЖивотногоХряк КАК НомерЖивотногоХряк,
//	|	ЖурналОсеменения.Работник КАК Работник,
//	|	ЖурналОсеменения.НомерОпороса КАК НомерОпороса,
//	|	ЖурналОсеменения.ОценкаСлучки КАК ОценкаСлучки,
//	|	ЖурналОсеменения.Статус КАК Статус,
//	|	ЖурналОсеменения.КодПородыХряк КАК НазваниеПородыХряк
//	|ИЗ
//	|	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
//	|ГДЕ
//	|	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
//	|	И ЖурналОсеменения.ДатаВвода = &ДатаВвода
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДатаСлучка";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);  
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//	РезультатСлучки  = Запрос.Выполнить().Выбрать();  
//	Пока РезультатСлучки .Следующий() Цикл
//		Если РезультатСлучки .НомерОпороса <> 0 Тогда
//			НоваяСтрока = ТЧСлучка.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатСлучки );
//		Иначе   
//			НоваяСтрока = ТЧСлучка.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатСлучки );
//			Запрос = Новый Запрос;
//			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ЖурналОпоросаСрезПервых.НомерОпороса КАК НомерОпороса,
//			|	ЖурналОпоросаСрезПервых.Период КАК Период
//			|ИЗ
//			|	РегистрСведений.ЖурналОпороса.СрезПервых(
//			|			&ДатаОтбора,
//			|			НомерЖивотного = &НомерЖивотного
//			|				И ДатаВвода = &ДатаВвода) КАК ЖурналОпоросаСрезПервых
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	НомерОпороса";
//			Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
//			Запрос.УстановитьПараметр("ДатаОтбора",РезультатСлучки.ДатаСлучка);
//			Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//			РезультатНомерОпороса = Запрос.Выполнить().Выбрать(); 
//			Если РезультатНомерОпороса.Количество() = 0 Тогда  
//				Запрос = Новый Запрос;
//				Запрос.Текст = "ВЫБРАТЬ
//				               |	МАКСИМУМ(ЖурналОпоросаСрезПервых.НомерОпороса) КАК НомерОпороса
//				               |ИЗ
//				               |	РегистрСведений.ЖурналОпороса.СрезПервых(
//				               |			,
//				               |			НомерЖивотного = &НомерЖивотного
//				               |				И ДатаВвода = &ДатаВвода) КАК ЖурналОпоросаСрезПервых
//				               |
//				               |УПОРЯДОЧИТЬ ПО
//				               |	НомерОпороса";
//				Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
//				Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//				РезультатНомерОпороса = Запрос.Выполнить().Выбрать(); 
//				Если РезультатНомерОпороса.Количество() = 0 Тогда 
//					НоваяСтрока.НомерОпороса = 1;   
//				Иначе
//					Пока РезультатНомерОпороса.Следующий() Цикл  
//						Если ЗначениеЗаполнено(РезультатНомерОпороса.НомерОпороса) Тогда
//							НоваяСтрока.НомерОпороса   = РезультатНомерОпороса.НомерОпороса + 1;
//						Иначе 
//							НоваяСтрока.НомерОпороса = 1;
//						КонецЕсли;
//					КонецЦикла;
//				КонецЕсли;
//				 
//			Иначе
//				Пока РезультатНомерОпороса.Следующий() Цикл  
//					НоваяСтрока.НомерОпороса   = РезультатНомерОпороса.НомерОпороса;
//				КонецЦикла; 
//			КонецЕсли;			                               			
//		КонецЕсли;
//	КонецЦикла;
//	
//	НомерОпороса = 0;
//	Для Каждого Стр Из ТЧСлучка Цикл 
//		//Если Стр.НомерОпороса = 0 Тогда 
//			НаборЗаписей = РегистрыСведений.ЖурналОсеменения.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
//			НаборЗаписей.Отбор.Период.Установить(Стр.ДатаСлучка);
//			НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
//			НаборЗаписей.Прочитать();
//			Для Каждого Записи Из НаборЗаписей Цикл  
//				Если Стр.НомерОпороса = 0 Тогда
//					Стр.НомерОпороса = НомерОпороса + 1;
//				Иначе  
//					НомерОпороса = Стр.НомерОпороса;
//				КонецЕсли;
//				Записи.НомерОпороса = Стр.НомерОпороса;
//				 
//			КонецЦикла;  	
//			НаборЗаписей.Записать();
//		//КонецЕсли;
//	КонецЦикла
//КонецПроцедуры  

//&НаСервере
//Процедура ПолучитьДанныеСупоросностьНаСервере()
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	ТЧСупоросность.Очистить();
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	Супоросность.Период КАК ДатаУЗИ,
//	|	Супоросность.РезультатУЗИ КАК РезультатУЗИ,
//	|	Супоросность.НомерОпороса КАК НомерОпороса
//	|ИЗ
//	|	РегистрСведений.Супоросность КАК Супоросность
//	|ГДЕ
//	|	Супоросность.НомерЖивотного = &НомерЖивотного
//	|	И Супоросность.ДатаВвода = &ДатаВвода
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДатаУЗИ";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного); 
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//	РезультатСупоросность  = Запрос.Выполнить().Выбрать();  
//	Пока РезультатСупоросность.Следующий() Цикл
//		Если РезультатСупоросность.НомерОпороса <> 0 Тогда
//			НоваяСтрока = ТЧСупоросность.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатСупоросность);
//		Иначе   
//			НоваяСтрока = ТЧСупоросность.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатСупоросность);
//			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ЖурналОпоросаСрезПервых.НомерОпороса КАК НомерОпороса,
//			|	ЖурналОпоросаСрезПервых.Период КАК Период
//			|ИЗ
//			|	РегистрСведений.ЖурналОпороса.СрезПервых(
//			|			&ДатаОтбора,
//			|			НомерЖивотного = &НомерЖивотного
//			|				И ДатаВвода = &ДатаВвода) КАК ЖурналОпоросаСрезПервых
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	НомерОпороса";
//			Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
//			Запрос.УстановитьПараметр("ДатаОтбора",РезультатСупоросность.ДатаУЗИ);
//			Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//			РезультатНомерОпороса = Запрос.Выполнить().Выбрать();
//			Пока РезультатНомерОпороса.Следующий() Цикл  
//				НоваяСтрока.НомерОпороса   = РезультатНомерОпороса.НомерОпороса;
//			КонецЦикла;  
//			Если РезультатНомерОпороса.НомерОпороса = Неопределено Тогда
//				НоваяСтрока.НомерОпороса = Запись.НомерОпороса;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;	
//КонецПроцедуры  

//&НаСервере
//Процедура ПолучитьДанныеАбортаНаСервере()
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	ТЧАборт.Очистить();
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	Аборт.Период КАК ДатаАборта,
//	|	Аборт.Мачеха КАК Мачеха,
//	|	Аборт.НомерОпороса КАК НомерОпороса
//	|ИЗ
//	|	РегистрСведений.Аборт КАК Аборт
//	|ГДЕ
//	|	Аборт.НомерЖивотного = &НомерЖивотного
//	|	И Аборт.ДатаВвода = &ДатаВвода";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного); 
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//	РезультатАборт  = Запрос.Выполнить().Выбрать();  
//	Пока РезультатАборт.Следующий() Цикл
//		Если РезультатАборт.НомерОпороса <> 0 Тогда
//			НоваяСтрока = ТЧАборт.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатАборт);
//		Иначе   
//			НоваяСтрока = ТЧАборт.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатАборт);
//			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ЖурналОпоросаСрезПервых.НомерОпороса КАК НомерОпороса,
//			|	ЖурналОпоросаСрезПервых.Период КАК Период
//			|ИЗ
//			|	РегистрСведений.ЖурналОпороса.СрезПервых(
//			|			&ДатаОтбора,
//			|			НомерЖивотного = &НомерЖивотного
//			|				И ДатаВвода = &ДатаВвода) КАК ЖурналОпоросаСрезПервых
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	НомерОпороса";
//			Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
//			Запрос.УстановитьПараметр("ДатаОтбора",РезультатАборт.ДатаАборта);  
//			Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//			РезультатНомерОпороса = Запрос.Выполнить().Выбрать();
//			Пока РезультатНомерОпороса.Следующий() Цикл  
//				НоваяСтрока.НомерОпороса   = РезультатНомерОпороса.НомерОпороса;
//			КонецЦикла; 
//			Если РезультатНомерОпороса.НомерОпороса = Неопределено Тогда
//				НоваяСтрока.НомерОпороса = Запись.НомерОпороса + 1;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	Если РезультатАборт.Количество() > 0  Тогда
//		Запись.НомерОпороса = Запись.НомерОпороса + 1;
//	КонецЕсли;
//КонецПроцедуры

//&НаСервере
//Процедура ПолучитьДанныеПодсосныеПоросятаНаСервере() 
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	ТЧПодсосныеПоросята.Очистить();
//	Запрос = Новый Запрос;
//	Запрос.Текст ="ВЫБРАТЬ
//	|	ПадежПоросят.Период КАК ДатаПадежа,
//	|	ПадежПоросят.НомерОпороса КАК НомерОпороса,
//	|	ПадежПоросят.НомерЖивотного КАК НомерЖивотного
//	|ИЗ
//	|	РегистрСведений.ПадежПоросят КАК ПадежПоросят
//	|ГДЕ
//	|	ПадежПоросят.НомерЖивотного = &НомерЖивотного
//	|	И ПадежПоросят.ДатаВвода = &ДатаВвода";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного); 
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//	РезультатПадеж  = Запрос.Выполнить().Выбрать();  
//	Пока РезультатПадеж.Следующий() Цикл
//		Если РезультатПадеж.НомерОпороса = 0 Тогда
//			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ЖурналОпоросаСрезПервых.НомерОпороса КАК НомерОпороса,
//			|	ЖурналОпоросаСрезПервых.Период КАК Период
//			|ИЗ
//			|	РегистрСведений.ЖурналОпороса.СрезПервых(
//			|			&ДатаОтбора,
//			|			НомерЖивотного = &НомерЖивотного
//			|				И ДатаВвода = &ДатаВвода) КАК ЖурналОпоросаСрезПервых
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	НомерОпороса";
//			Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
//			Запрос.УстановитьПараметр("ДатаОтбора",РезультатПадеж.ДатаПадежа);
//			Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//			РезультатНомерОпороса = Запрос.Выполнить().Выбрать();
//			Пока РезультатНомерОпороса.Следующий() Цикл  
//				НаборЗаписей = РегистрыСведений.ПадежПоросят.СоздатьНаборЗаписей();
//				НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
//				НаборЗаписей.Отбор.Период.Установить(РезультатПадеж.ДатаПадежа);
//				НаборЗаписей.Прочитать(); 
//				Для Каждого Записи Из НаборЗаписей Цикл					
//					Записи.НомерОпороса = РезультатНомерОпороса.НомерОпороса;						
//				КонецЦикла;      
//				НаборЗаписей.Записать();
//			КонецЦикла;                                			
//		КонецЕсли;
//	КонецЦикла;
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст ="ВЫБРАТЬ
//	|	ПадежПоросят.КоличествоМертвых КАК Падеж,
//	|	ПереводПоросят.КоличествоПереведенных КАК Перевод,
//	|	ЖурналОсеменения.НомерОпороса КАК НомерОпороса
//	|ИЗ
//	|	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереводПоросят КАК ПереводПоросят
//	|		ПО ЖурналОсеменения.НомерЖивотного = ПереводПоросят.НомерЖивотного
//	|			И ЖурналОсеменения.НомерОпороса = ПереводПоросят.НомерОпороса
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПадежПоросят КАК ПадежПоросят
//	|		ПО ЖурналОсеменения.НомерЖивотного = ПадежПоросят.НомерЖивотного
//	|			И ЖурналОсеменения.НомерОпороса = ПадежПоросят.НомерОпороса
//	|ГДЕ
//	|	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
//	|	И ЖурналОсеменения.ДатаВвода = &ДатаВвода
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	НомерОпороса";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного); 
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	ТЧПодсосныеПоросята.Очистить();
//	ТЧПодсосныеПоросята.Загрузить(РезультатЗапроса);
//	
//КонецПроцедуры 

//&НаСервере
//Процедура ПолучитьДанныеОтъемаНаСервере()
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	ТЧОтъем.Очистить();
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	ЖурналОтъема.Период КАК ДатаОтъема,
//	|	ЖурналОтъема.Мачеха КАК Мачеха,
//	|	ЖурналОтъема.КоличествоОтъемышей КАК КоличествоОтъемышей,
//	|	ЖурналОтъема.МассаВсего КАК МассаВсего,
//	|	ЖурналОтъема.СреднийВес КАК СреднийВес,
//	|	ЖурналОтъема.НомерОпороса КАК НомерОпороса
//	|ИЗ
//	|	РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
//	|ГДЕ
//	|	ЖурналОтъема.НомерЖивотного = &НомерЖивотного
//	|	И ЖурналОтъема.ДатаВвода = &ДатаВвода
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДатаОтъема";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного); 
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//	РезультатОтъем  = Запрос.Выполнить().Выбрать();  
//	Пока РезультатОтъем .Следующий() Цикл
//		Если РезультатОтъем .НомерОпороса <> 0 Тогда
//			НоваяСтрока = ТЧОтъем.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатОтъем );
//		Иначе   
//			НоваяСтрока = ТЧОтъем.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатОтъем );
//			Запрос = Новый Запрос;
//			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ЖурналОсемененияСрезПоследних.НомерОпороса КАК НомерОпороса
//			|ИЗ
//			|	РегистрСведений.ЖурналОсеменения.СрезПоследних(
//			|			&ДатаОтбора,
//			|			НомерЖивотного = &НомерЖивотного
//			|				И ДатаВвода = &ДатаВвода) КАК ЖурналОсемененияСрезПоследних
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	НомерОпороса УБЫВ";
//			Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
//			Запрос.УстановитьПараметр("ДатаОтбора",РезультатОтъем.ДатаОтъема - 1);
//			Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//			РезультатНомерОпороса = Запрос.Выполнить().Выбрать();
//			Пока РезультатНомерОпороса.Следующий() Цикл  
//				НоваяСтрока.НомерОпороса   = РезультатНомерОпороса.НомерОпороса;
//			КонецЦикла;                                			
//		КонецЕсли;
//	КонецЦикла;	
//	
//	Для Каждого Стр Из ТЧОтъем Цикл 
//		НаборЗаписей = РегистрыСведений.ЖурналОтъема.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
//		НаборЗаписей.Отбор.Период.Установить(Стр.ДатаОтъема); 
//		НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
//		НаборЗаписей.Прочитать();
//		Для Каждого Записи Из НаборЗаписей Цикл
//			Записи.НомерОпороса 	   = Стр.НомерОпороса;
//			Записи.ДатаВвода	       = Запись.Период;
//			Записи.Период			   = Стр.ДатаОтъема;
//			Записи.КоличествоОтъемышей = Стр.КоличествоОтъемышей;
//			Записи.МассаВсего          = Стр.МассаВсего;
//			Записи.СреднийВес          = Стр.СреднийВес;
//		КонецЦикла;  	
//		НаборЗаписей.Записать();		
//	КонецЦикла;
//	
//КонецПроцедуры 	

//&НаСервере
//Процедура ПолучитьКоличествоОпоросовНаСервере()
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	//Запрос = Новый Запрос;
//	//Запрос.Текст = "ВЫБРАТЬ
//	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналОпоросаСрезПоследних.НомерОпороса) КАК НомерОпороса
//	//|ИЗ
//	//|	РегистрСведений.ЖурналОпороса.СрезПоследних(, ) КАК ЖурналОпоросаСрезПоследних
//	//|ГДЕ
//	//|	ЖурналОпоросаСрезПоследних.НомерЖивотного = &НомерЖивотного
//	//|	И (ЖурналОпоросаСрезПоследних.Живорожденные > 0
//	//|			ИЛИ ЖурналОпоросаСрезПоследних.Мертвые > 0)
//	//|	И ЖурналОпоросаСрезПоследних.ДатаВвода = &ДатаВвода";  
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналОсеменения.НомерОпороса) КАК НомерОпороса
//	               |ИЗ
//	               |	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
//	               |ГДЕ
//	               |	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
//	               |	И ЖурналОсеменения.ДатаВвода = &ДатаВвода";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного); 
//	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
//	РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	Пока РезультатЗапроса.Следующий()Цикл
//		Запись.НомерОпороса = РезультатЗапроса.НомерОпороса; 
//	КонецЦикла;
//	
//КонецПроцедуры  

//&НаСервере
//Процедура ПолучитьДанныеВакцинацииНаСервере()
//	
//	Перем Запрос, РезультатЗапроса;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст ="ВЫБРАТЬ
//	|	Вакцинация.Период КАК ДатаВакцинации,
//	|	Вакцинация.Пролечено КАК Пролечено
//	|ИЗ
//	|	РегистрСведений.Вакцинация КАК Вакцинация
//	|ГДЕ
//	|	Вакцинация.НомерЖивотного = &НомерЖивотного";
//	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	ТЧВакцинация.Очистить();
//	ТЧВакцинация.Загрузить(РезультатЗапроса);
//	
//КонецПроцедуры 
//
//&НаКлиенте
//Процедура ЗаполнитьОбщуюТаблицу()       
//	ТЧОбщая.Очистить();
//	Для Каждого Стр ИЗ ТЧСлучка Цикл
//		НоваяСтрока = ТЧОбщая.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
//	КонецЦикла;	 
//	Для Каждого Стр ИЗ ТЧСупоросность Цикл 
//		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса",Стр.НомерОпороса));  
//		СтрокаТаблицы = Неопределено;
//		Для Каждого СтрМассив ИЗ РезультатПоиска Цикл
//			Если СтрокаТаблицы = Неопределено И Стр.ДатаУЗИ >=  СтрМассив.ДатаСлучка Тогда
//				СтрокаТаблицы = СтрМассив;
//			ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаСлучка > СтрокаТаблицы.ДатаСлучка И Стр.ДатаУЗИ >=  СтрМассив.ДатаСлучка Тогда
//				СтрокаТаблицы = СтрМассив;
//			КонецЕсли; 		
//		КонецЦикла; 
//		Если СтрокаТаблицы <> Неопределено Тогда
//			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Стр);
//		КонецЕсли;
//	КонецЦикла;
//	Для Каждого Стр ИЗ ТЧАборт Цикл 
//		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса",Стр.НомерОпороса));  
//		СтрокаТаблицы = Неопределено;
//		Для Каждого СтрМассив ИЗ РезультатПоиска Цикл
//			Если СтрокаТаблицы = Неопределено И Стр.ДатаАборта >  СтрМассив.ДатаСлучка Тогда
//				СтрокаТаблицы = СтрМассив;
//			ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаСлучка > СтрокаТаблицы.ДатаСлучка И Стр.ДатаАборта >  СтрМассив.ДатаСлучка Тогда
//				СтрокаТаблицы = СтрМассив;
//			КонецЕсли; 		
//		КонецЦикла;  
//		Если СтрокаТаблицы <> Неопределено Тогда
//			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Стр);
//		КонецЕсли;
//	КонецЦикла;
//	Для Каждого Стр ИЗ ТЧОпоросы Цикл
//		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса",Стр.НомерОпороса));  
//		СтрокаТаблицы = Неопределено;
//		Для Каждого СтрМассив ИЗ РезультатПоиска Цикл
//			Если СтрокаТаблицы = Неопределено И Стр.ДатаОпороса >  СтрМассив.ДатаСлучка Тогда
//				СтрокаТаблицы = СтрМассив;
//			ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаСлучка > СтрокаТаблицы.ДатаСлучка И Стр.ДатаОпороса >  СтрМассив.ДатаСлучка Тогда
//				СтрокаТаблицы = СтрМассив;
//			КонецЕсли; 		
//		КонецЦикла;    
//		Если СтрокаТаблицы <> Неопределено Тогда
//			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Стр); 
//			СтрокаТаблицы.МассаВсего 		= 0;
//			СтрокаТаблицы.СреднийВес		= 0;
//			СтрокаТаблицы.МассаВсегоОпорос 	= Стр.МассаВсего;
//			СтрокаТаблицы.СреднийВесОпорос	= Стр.СреднийВес;
//		КонецЕсли
//	КонецЦикла;  
//	Мачеха = Ложь;
//	Для Каждого Стр ИЗ ТЧОтъем Цикл 
//		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса",Стр.НомерОпороса));  
//		СтрокаТаблицы = Неопределено; 
//		
//		Если НЕ Мачеха Тогда
//			Для Каждого СтрМассив ИЗ РезультатПоиска Цикл
//				Если СтрокаТаблицы = Неопределено И (Стр.ДатаОтъема >=  СтрМассив.ДатаОпороса) Тогда
//					СтрокаТаблицы = СтрМассив; 
//				ИначеЕсли (Стр.ДатаОтъема < СтрМассив.ДатаОпороса) Тогда
//					Сообщить("Дата опороса ("+ СтрМассив.ДатаОпороса +") больше даты отъема("+Стр.ДатаОтъема+") " + Запись.НомерЖивотного); 
//					СтрокаТаблицы = СтрМассив;
//				ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаОпороса > СтрокаТаблицы.ДатаОпороса И Стр.ДатаОтъема >=  СтрМассив.ДатаОпороса Тогда
//					СтрокаТаблицы = СтрМассив;
//				КонецЕсли; 				
//			КонецЦикла; 
//			Если СтрокаТаблицы <> Неопределено Тогда
//				ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Стр);
//			КонецЕсли
//		Иначе   
//			НоваяСтрока = ТЧОбщая.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);	
//		КонецЕсли;
//		Мачеха = Стр.Мачеха;
//	КонецЦикла;         
//	ТЧОбщая.Сортировать("НомерОпороса ВОЗР");
//	ПредыдущаяСтрока = Неопределено; 
//	ВсегоПотеряноКормодней = 0;  
//	ПредыдущаяДатаОтъема =0;
//	Для Каждого Стр ИЗ ТЧОбщая Цикл 		
//		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса",Стр.НомерОпороса));  
//		Если Стр.ДатаОпороса <> Дата(1,1,1) Тогда
//			Стр.ПериодЛактации = (НачалоДня(Стр.ДатаОпороса) - НачалоДня(Стр.ДатаСлучка) )/ (24 * 60 *60);
//		КонецЕсли;
//		Если Стр.ДатаОтъема <> Дата(1,1,1)  Тогда   
//			Если Стр.ДатаОпороса = Дата(1,1,1)  Тогда  
//				Если ПредыдущаяДатаОтъема <> 0 Тогда
//					Стр.ПодсосныйПериод = (НачалоДня(Стр.ДатаОтъема) - НачалоДня(ПредыдущаяДатаОтъема) )/ (24 * 60 *60);
//				КонецЕсли;
//			Иначе
//				Стр.ПодсосныйПериод = (НачалоДня(Стр.ДатаОтъема) - НачалоДня(Стр.ДатаОпороса) )/ (24 * 60 *60);  
//			КонецЕсли;
//			ПредыдущаяДатаОтъема = Стр.ДатаОтъема;
//		КонецЕсли;  
//		Если ПредыдущаяСтрока <> Неопределено Тогда 
//			Если Стр.ДатаСлучка <> Дата(1,1,1) Тогда 
//				Если ПредыдущаяСтрока.ДатаОтъема = Дата(1,1,1) Тогда 
//					ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Стр.ДатаСлучка) - НачалоДня(ПредыдущаяСтрока.ДатаСлучка) )/ (24 * 60 *60);				
//				Иначе                                                                                                                 
//					ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Стр.ДатаСлучка) - НачалоДня(ПредыдущаяСтрока.ДатаОтъема) )/ (24 * 60 *60);	
//				КонецЕсли;  
//			КонецЕсли;
//			ВсегоПотеряноКормодней = ВсегоПотеряноКормодней + ПредыдущаяСтрока.ПустыеДни;
//			ПредыдущаяСтрока.ВсегоПотеряноКормодней = ВсегоПотеряноКормодней;
//		КонецЕсли;  
//		ПредыдущаяСтрока = Стр;
//	КонецЦикла; 
//	Если Запись.ДатаВыбытие <> Дата(1,1,1) И ПредыдущаяСтрока <> Неопределено Тогда 
//		Если ПредыдущаяСтрока.ДатаОтъема = Дата(1,1,1) Тогда 
//			ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Запись.ДатаВыбытие) - НачалоДня(ПредыдущаяСтрока.ДатаСлучка) )/ (24 * 60 *60);				
//		Иначе                                                                                                                 
//			ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Запись.ДатаВыбытие) - НачалоДня(ПредыдущаяСтрока.ДатаОтъема) )/ (24 * 60 *60);	
//		КонецЕсли
//	КонецЕсли; 
//	
//	КоличествоСтрок = ТЧОбщая.Количество();	
//	Если КоличествоСтрок > 0 Тогда 
//		ПоследняяСтрока = ТЧОбщая[КоличествоСтрок - 1];
//		Если ПоследняяСтрока.ДатаАборта = '00010101000000' Тогда
//			Если ПоследняяСтрока.ДатаОпороса = '00010101000000' И ПоследняяСтрока.ДатаСлучка <> '00010101000000' Тогда
//				ПоследняяСтрока.ДатаОпороса = ПоследняяСтрока.ДатаСлучка + _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 *60);
//			КонецЕсли; 
//		Иначе 
//			ПоследняяСтрока.ДатаОпороса = '00010101000000';	
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ДобавитьОпорос(Команда)   
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма); 
	ПараметрыФормы = Новый Структура("НомерЖивотного, НомерОпороса, ДатаВвода, Порода, ДатаРождения",Запись.НомерЖивотного, Запись.НомерОпороса + 1,Запись.Период, Запись.КодПороды, Запись.ДатаРождения);
	ОткрытьФорму("РегистрСведений.ЖурналОпороса.Форма.ФормаЗаписи",ПараметрыФормы,,,,,Оповещение);
КонецПроцедуры           

&НаСервере
Процедура ФормаЗакрыта(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если Не РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеОпоросНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧОпоросы);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеСлучкаНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧСлучка);	
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеСупоросностьНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧСупоросность,Запись.НомерОпороса);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеАбортаНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧАборт,Запись.НомерОпороса);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеПодсосныеПоросятаНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧПодсосныеПоросята);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеОтъемаНаСервере(Запись.НомерЖивотного,Запись.Период, ТЧОтъем); 
	РегистрыСведений.КарточкаСвиноматки.ПолучитьКоличествоОпоросовНаСервере(Запись.НомерЖивотного,Запись.Период,Запись.НомерОпороса);
	РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеВакцинацииНаСервере(Запись.НомерЖивотного,Запись.Период,ТЧВакцинация);
 	
КонецПроцедуры

  






&НаСервере
Процедура ПолучитьДанныеКлючевыеЦифрыОпоросаНаСервере()
	
	Перем Запрос, РезультатЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	МАКСИМУМ(ЖурналОсеменения.Период) КАК Период,
	              |	ЖурналОсеменения.НомерОпороса КАК НомерОпороса,
	              |	ЖурналОсеменения.НомерЖивотного КАК НомерЖивотного
	              |ПОМЕСТИТЬ ВТСлучка
	              |ИЗ
	              |	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
	              |ГДЕ
	              |	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
	              |	И ЖурналОсеменения.ДатаВвода = &ДатаВвода
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ЖурналОсеменения.НомерОпороса,
	              |	ЖурналОсеменения.НомерЖивотного
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЖурналОтъема.Период КАК ДатаОтъема,
	              |	ВТСлучка.Период КАК ДатаСлучки,
	              |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ВТСлучка.Период, ДЕНЬ), ДЕНЬ) КАК ВсегоПотеряноКормодней,
	              |	ЖурналОтъема.НомерЖивотного КАК НомерЖивотного,
	              |	ЖурналОтъема.НомерОпороса КАК НомерОпороса
	              |ПОМЕСТИТЬ ВТКормодни
	              |ИЗ
	              |	РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСлучка КАК ВТСлучка
	              |		ПО (ЖурналОтъема.НомерОпороса + 1 = ВТСлучка.НомерОпороса)
	              |			И (ВТСлучка.НомерЖивотного = ЖурналОтъема.НомерЖивотного)
	              |ГДЕ
	              |	ЖурналОтъема.Период <> ДАТАВРЕМЯ(1, 1, 1)
	              |	И ЖурналОтъема.НомерЖивотного = &НомерЖивотного
	              |	И ЖурналОтъема.ДатаВвода = &ДатаВвода
	              |	И ЖурналОтъема.Мачеха = ЛОЖЬ
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТСлучка.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), ДЕНЬ) КАК ПериодЛактации,
	              |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), ДЕНЬ) КАК ПодсосныйПериод,
	              |	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), ДЕНЬ) КАК ВозрастПоросят,
	              |	ЖурналОпороса.НомерОпороса КАК НомерОпороса,
	              |	ЖурналОпороса.НомерЖивотного КАК НомерЖивотного,
	              |	ВТКормодни.ВсегоПотеряноКормодней КАК ВсегоПотеряноКормодней
	              |ИЗ
	              |	РегистрСведений.ЖурналОпороса КАК ЖурналОпороса
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСлучка КАК ВТСлучка
	              |		ПО ЖурналОпороса.НомерОпороса = ВТСлучка.НомерОпороса
	              |			И (ВТСлучка.НомерЖивотного = ЖурналОпороса.НомерЖивотного)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
	              |		ПО ЖурналОпороса.НомерЖивотного = ЖурналОтъема.НомерЖивотного
	              |			И ЖурналОпороса.НомерОпороса = ЖурналОтъема.НомерОпороса
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКормодни КАК ВТКормодни
	              |		ПО (ВТКормодни.НомерЖивотного = ЖурналОпороса.НомерЖивотного)
	              |			И ЖурналОпороса.НомерОпороса = ВТКормодни.НомерОпороса
	              |ГДЕ
	              |	ЖурналОпороса.НомерЖивотного = &НомерЖивотного
	              |	И ЖурналОтъема.Период <> ДАТАВРЕМЯ(1, 1, 1)
	              |	И ЖурналОпороса.ДатаВвода = &ДатаВвода
	              |	И ЖурналОтъема.Мачеха = ЛОЖЬ";
	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного); 
	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТЧКлючевыеЦифрыОпороса.Очистить();
	ТЧКлючевыеЦифрыОпороса.Загрузить(РезультатЗапроса); 
	ПараметрыОтбора = Новый Структура("НомерОпороса",1);
	НайденныеСтроки = ТЧСлучка.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 1 Тогда 
		ПустыеДни = (НайденныеСтроки[НайденныеСтроки.Количество() - 1].ДатаСлучка - НайденныеСтроки[0].ДатаСлучка )  / (60 * 60 * 24);
		Если ТЧКлючевыеЦифрыОпороса.Количество() > 0 Тогда 
			ТЧКлючевыеЦифрыОпороса[0].ВсегоПотеряноКормодней = ТЧКлючевыеЦифрыОпороса[0].ВсегоПотеряноКормодней + ПустыеДни; 
		КонецЕсли;
	КонецЕСли
КонецПроцедуры 


&НаСервере
Процедура ПолучитьДанныеИнформацияНаСервере()   
	Дата = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЖурналОсеменения.Период) КАК Период,
	|	ЖурналОсеменения.НомерОпороса КАК НомерОпороса,
	|	ЖурналОсеменения.НомерЖивотного КАК НомерЖивотного
	|ПОМЕСТИТЬ ВТСлучка
	|ИЗ
	|	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
	|ГДЕ
	|	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
	|	И ЖурналОсеменения.ДатаВвода = &ДатаВвода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОсеменения.НомерОпороса,
	|	ЖурналОсеменения.НомерЖивотного
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьДатОсеменение,
	|	ВЫБОР
	|		КОГДА ЖурналОпороса.НомерОпороса > 0
	|			ТОГДА ЖурналОпороса.НомерОпороса
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерОпороса,
	|	ВЫБОР
	|		КОГДА ЖурналОпороса.Живорожденные > 0
	|			ТОГДА ЖурналОпороса.Живорожденные
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Живорожденные,
	|	ВЫБОР
	|		КОГДА ЖурналОпороса.Мертвые > 0
	|			ТОГДА ЖурналОпороса.Мертвые
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Мертвые,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТСлучка.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), ДЕНЬ) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТСлучка.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПериодЛактации,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), ДЕНЬ) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПодсосныйПериод,
	|	ВЫБОР
	|		КОГДА Аборт.НомерОпороса > 0
	|			ТОГДА КОЛИЧЕСТВО(Аборт.НомерОпороса)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерАборта,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОтъема.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОтъема.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазностьДатОтъем,
	|	ВЫБОР
	|		КОГДА ЖурналОтъема.КоличествоОтъемышей > 0
	|			ТОГДА ЖурналОтъема.КоличествоОтъемышей
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОтъемышей,
	|	ВЫБОР
	|		КОГДА ПадежПоросят.КоличествоМертвых > 0
	|			ТОГДА ПадежПоросят.КоличествоМертвых
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМертвых
	|ИЗ
	|	РегистрСведений.ЖурналОпороса КАК ЖурналОпороса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
	|		ПО ЖурналОпороса.НомерЖивотного = ЖурналОтъема.НомерЖивотного
	|			И ЖурналОпороса.НомерОпороса = ЖурналОтъема.НомерОпороса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСлучка КАК ВТСлучка
	|		ПО ЖурналОпороса.НомерЖивотного = ВТСлучка.НомерЖивотного
	|			И ЖурналОпороса.НомерОпороса = ВТСлучка.НомерОпороса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Аборт КАК Аборт
	|		ПО ЖурналОпороса.НомерЖивотного = Аборт.НомерЖивотного
	|			И ЖурналОпороса.НомерОпороса = Аборт.НомерОпороса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПадежПоросят КАК ПадежПоросят
	|		ПО ЖурналОпороса.НомерЖивотного = ПадежПоросят.НомерЖивотного
	|			И ЖурналОпороса.НомерОпороса = ПадежПоросят.НомерОпороса
	|ГДЕ
	|	ЖурналОпороса.НомерЖивотного = &НомерЖивотного
	|	И ЖурналОпороса.ДатаВвода = &ДатаВвода
	//|	И ЖурналОтъема.Мачеха = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЖурналОпороса.НомерОпороса,
	|	ВЫБОР
	|		КОГДА ЖурналОпороса.Живорожденные > 0
	|			ТОГДА ЖурналОпороса.Живорожденные
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналОпороса.Мертвые > 0
	|			ТОГДА ЖурналОпороса.Мертвые
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТСлучка.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), ДЕНЬ) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТСлучка.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), ДЕНЬ) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОпороса.Период, ДЕНЬ), КОНЕЦПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), ДЕНЬ)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Аборт.НомерОпороса,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОтъема.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД) > 0
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЖурналОтъема.Период, ГОД), КОНЕЦПЕРИОДА(&ТекущаяДата, ГОД), ГОД)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналОтъема.КоличествоОтъемышей > 0
	|			ТОГДА ЖурналОтъема.КоличествоОтъемышей
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПадежПоросят.КоличествоМертвых > 0
	|			ТОГДА ПадежПоросят.КоличествоМертвых
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("НомерЖивотного", Запись.НомерЖивотного);
	Запрос.УстановитьПараметр("ТекущаяДата", Дата); 
	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Живорожденные = 0;
	Мертвые = 0;
	КоличествоОтъемышей = 0;    
	НомерОпороса = 0;
	ПериодЛактации = 0;
	ПодсосныйПериод = 0; 
	НомерАборта = 0;
	КоличествоМертвых = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Живорожденные = Живорожденные + ВыборкаДетальныеЗаписи.Живорожденные; 
		Мертвые = Мертвые + ВыборкаДетальныеЗаписи.Мертвые;  
		//КоличествоОтъемышей = КоличествоОтъемышей + ВыборкаДетальныеЗаписи.КоличествоОтъемышей;
		//	НомерОпороса = НомерОпороса + ВыборкаДетальныеЗаписи.НомерОпороса;
		ПериодЛактации = ПериодЛактации + ВыборкаДетальныеЗаписи.ПериодЛактации;
		ПодсосныйПериод = ПодсосныйПериод + ВыборкаДетальныеЗаписи.ПодсосныйПериод;
		НомерАборта = НомерАборта + ВыборкаДетальныеЗаписи.НомерАборта; 
		КоличествоМертвых = КоличествоМертвых + ВыборкаДетальныеЗаписи.КоличествоМертвых;
	КонецЦикла; 
	Живорожденные = ТЧОпоросы.Итог("Живорожденные");
	Мертвые		  = ТЧОпоросы.Итог("Мертвые");
	КоличествоОтъемышей = ТЧОтъем.Итог("КоличествоОтъемышей");
	Запись.КоличествоАбортов = НомерАборта;
	Запись.ЖиворожденныхВсего = Живорожденные; 
	
	Запись.ОтнятыхПоросят = КоличествоОтъемышей;   
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ЖурналОсеменения.Период) КАК Период,
	|	ЖурналОсеменения.НомерОпороса КАК НомерОпороса,
	|	ЖурналОсеменения.НомерЖивотного КАК НомерЖивотного
	|ПОМЕСТИТЬ ВТСлучка
	|ИЗ
	|	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
	|ГДЕ
	|	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
	|	И ЖурналОсеменения.ДатаВвода = &ДатаВвода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОсеменения.НомерОпороса,
	|	ЖурналОсеменения.НомерЖивотного
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСлучка.НомерОпороса КАК НомерОпороса,
	|	ВТСлучка.Период КАК Период,
	|	ЖурналОтъема.Период КАК Период1,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТСлучка.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ЖурналОтъема.Период, ДЕНЬ), ДЕНЬ) КАК ПродуктивныеДни
	|ИЗ
	|	ВТСлучка КАК ВТСлучка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
	|		ПО ВТСлучка.НомерЖивотного = ЖурналОтъема.НомерЖивотного
	|			И ВТСлучка.НомерОпороса = ЖурналОтъема.НомерОпороса
	|ГДЕ
	|	ЖурналОтъема.Период <> ДАТАВРЕМЯ(1, 1, 1)";
//	|	И ЖурналОтъема.Мачеха = ЛОЖЬ";
	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();   
	ПродуктивныеДни = 0;
	Пока РезультатЗапроса.Следующий() Цикл
		ПродуктивныеДни = ПродуктивныеДни + РезультатЗапроса.ПродуктивныеДни;	
	КонецЦикла; 
	
	ПустыеКормодни = 0; 
	НомерОпороса = 0;
	Для Каждого Стр ИЗ ТЧОбщая Цикл
		ПустыеКормодни = ПустыеКормодни + Стр.ПустыеДни;
		НомерОпороса = Стр.НомерОпороса;
	КонецЦикла;
	Если Запись.ДатаВыбытие <> Дата(1,1,1) Тогда    
		ДатаПоследнегоОтъема = ПолучитьДатуПоследнегоОтъемаНаСервере(Запись.НомерЖивотного);
		Если ДатаПоследнегоОтъема <> Неопределено Тогда
			ПустыеКормодни = ПустыеКормодни + (НачалоДня(Запись.ДатаВыбытие) - НачалоДня(ДатаПоследнегоОтъема)) / (60 * 60 * 24)
		КонецЕсли;	
	КонецЕсли;
	Запись.ПустыеКормодни = ПустыеКормодни; 
	
	//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РазностьДатОсеменение) Тогда      
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖурналОтъема.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
	               |ГДЕ
	               |	ЖурналОтъема.НомерЖивотного = &НомерЖивотного
	               |	И ЖурналОтъема.ДатаВвода = &ДатаВвода
	               |	И ЖурналОтъема.НомерОпороса = &НомерОпороса";
	Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период); 
	Запрос.УстановитьПараметр("НомерОпороса",Запись.НомерОпороса);
	РезультаЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультаЗапроса.Количество() > 0 Тогда   
		НомерОпороса = Запись.НомерОпороса;
	Иначе
		НомерОпороса = Запись.НомерОпороса - 1;
	КонецЕсли;
	
	Если НомерОпороса > 0  Тогда
		Запись.ЖиворожденныхНаОпорос = Живорожденные/НомерОпороса; 
		Запись.МертворожденныхНаОпорос = Мертвые/НомерОпороса;	
		Запись.СупоросныхДнейНаОпорос = ПериодЛактации/НомерОпороса;
		Запись.ПодсосныхДнейНаОпорос = ПодсосныйПериод/НомерОпороса;   
		ЖиворожденныхНаОпорос = Запись.ЖиворожденныхНаОпорос; 
	КонецЕсли;
	Если (ПродуктивныеДни + ПустыеКормодни) > 0 Тогда
		Запись.ОпоросовНаСвиноматкуВГод = НомерОпороса/((ПродуктивныеДни + ПустыеКормодни)/365);
		Запись.ЖиворожденныхНаСвиноматкуВГод = Запись.ЖиворожденныхНаОпорос * Запись.ОпоросовНаСвиноматкуВГод; 
		Если НомерОпороса - 1 > 0 Тогда  
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЖурналОтъема.Период КАК Период,
			|	ЖурналОтъема.НомерОпороса КАК НомерОпороса
			|ПОМЕСТИТЬ ВТОтъем
			|ИЗ
			|	РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
			|ГДЕ
			|	ЖурналОтъема.Мачеха = ЛОЖЬ
			|	И ЖурналОтъема.НомерЖивотного = &НомерЖивотного
			|	И ЖурналОтъема.ДатаВвода = &ДатаВвода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ЖурналОсеменения.Период) КАК Период,
			|	ЖурналОсеменения.НомерОпороса КАК НомерОпороса
			|ПОМЕСТИТЬ ВТОсемение
			|ИЗ
			|	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
			|ГДЕ
			|	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
			|	И ЖурналОсеменения.ДатаВвода = &ДатаВвода
			|
			|СГРУППИРОВАТЬ ПО
			|	ЖурналОсеменения.НомерОпороса
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТОтъем.Период, ДЕНЬ), НАЧАЛОПЕРИОДА(ВТОсемение.Период, ДЕНЬ), ДЕНЬ)) КАК ДнейОтОтъемаДоОсеменения
			|ИЗ
			|	ВТОтъем КАК ВТОтъем
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсемение КАК ВТОсемение
			|		ПО (ВТОсемение.НомерОпороса = ВТОтъем.НомерОпороса + 1)";
			Запрос.УстановитьПараметр("НомерЖивотного",Запись.НомерЖивотного);
			Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
			РезультаЗапроса = Запрос.Выполнить().Выбрать();
			Пока РезультаЗапроса.Следующий() Цикл  
				Если ЗначениеЗаполнено(РезультаЗапроса.ДнейОтОтъемаДоОсеменения) Тогда
					Запись.ДнейДо1Осеменения = РезультаЗапроса.ДнейОтОтъемаДоОсеменения / (НомерОпороса - 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;  
	Если НомерОпороса > 0 Тогда
		Запись.ОтнятоНаОпорос = КоличествоОтъемышей/НомерОпороса;
	КонецЕсли;
	Если Живорожденные > 0 Тогда
		Запись.ПадежДоОтъема = (Живорожденные - КоличествоОтъемышей)*100/Живорожденные;   
	КонецЕсли;
	
	
	
	Если НомерОпороса > 0  Тогда
		Запись.ПустыхДнейНаОпорос = ПустыеКормодни/НомерОпороса;  
	КонецЕсли; 
	Если Запись.ОпоросовНаСвиноматкуВГод > 0 Тогда
		Запись.ОтнятоПоросятНаСвиноматкуВГод = Запись.ОтнятоНаОпорос * Запись.ОпоросовНаСвиноматкуВГод;	  
	КонецЕсли;
КонецПроцедуры     

&НаСервере
Функция ПолучитьДатуПоследнегоОтъемаНаСервере(НомерЖивотного)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналОтъема.Период КАК Период
	|ПОМЕСТИТЬ ВТДаты
	|ИЗ
	|	РегистрСведений.ЖурналОтъема КАК ЖурналОтъема
	|ГДЕ
	|	ЖурналОтъема.НомерЖивотного = &НомерЖивотного
	|	И ЖурналОтъема.ДатаВвода = &ДатаВвода
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОтъема.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналОсеменения.Период
	|ИЗ
	|	РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
	|ГДЕ
	|	ЖурналОсеменения.НомерЖивотного = &НомерЖивотного
	|	И ЖурналОсеменения.ДатаВвода = &ДатаВвода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТДаты.Период КАК Период
	|ИЗ
	|	ВТДаты КАК ВТДаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Запрос.УстановитьПараметр("НомерЖивотного",НомерЖивотного);      
	Запрос.УстановитьПараметр("ДатаВвода",Запись.Период);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		ДатаОтъема = РезультатЗапроса.Период;
	КонецЦикла;                              
	Возврат ДатаОтъема;
КонецФункции

&НаКлиенте
Процедура ДобавитьОтъем(Команда)
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма); 
	ПараметрыФормы = Новый Структура("НомерЖивотного, НомерОпороса, ДатаВвода",Запись.НомерЖивотного, Запись.НомерОпороса + 1,Запись.Период);
	ОткрытьФорму("РегистрСведений.ЖурналОтъема.Форма.ФормаЗаписи",ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОсеменение(Команда)
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма); 
	ПараметрыФормы = Новый Структура("НомерЖивотного, НомерОпороса, ДатаВвода, Порода",Запись.НомерЖивотного, Запись.НомерОпороса + 1,Запись.Период, Запись.КодПороды);
	ОткрытьФорму("РегистрСведений.ЖурналОсеменения.Форма.ФормаЗаписи",ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВакцинацию(Команда)
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма);
	ОткрытьФорму("РегистрСведений.Вакцинация.Форма.ФормаЗаписи",,,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАборт(Команда)
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма);
	ПараметрыФормы = Новый Структура("НомерЖивотного, НомерОпороса, ДатаВвода, Порода",Запись.НомерЖивотного, Запись.НомерОпороса + 1,Запись.Период, Запись.КодПороды);
	ОткрытьФорму("РегистрСведений.Аборт.Форма.ФормаЗаписи",ПараметрыФормы,,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСупоросность(Команда)
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма);  
	ПараметрыФормы = Новый Структура("НомерЖивотного, НомерОпороса, ДатаВвода",Запись.НомерЖивотного, Запись.НомерОпороса + 1,Запись.Период);
	ОткрытьФорму("РегистрСведений.Супоросность.Форма.ФормаЗаписи",ПараметрыФормы,,,,,Оповещение); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПадеж(Команда)
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма);
	ПараметрыФормы = Новый Структура("НомерЖивотного, НомерОпороса, ДатаВвода",Запись.НомерЖивотного, Запись.НомерОпороса + 1,Запись.Период);
	ОткрытьФорму("РегистрСведений.ПадежПоросят.Форма.ФормаЗаписи",ПараметрыФормы,,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеревод(Команда)
	Оповещение = Новый ОписаниеОповещения("ФормаЗакрыта", ЭтаФорма); 
	ПараметрыФормы = Новый Структура("НомерЖивотного, НомерОпороса, ДатаВвода",Запись.НомерЖивотного, Запись.НомерОпороса + 1,Запись.Период);
	ОткрытьФорму("РегистрСведений.ПереводПоросят.Форма.ФормаЗаписи",ПараметрыФормы,,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	Элементы.НомерЖивотного.ТолькоПросмотр 	= Истина;
	Элементы.ДатаРождения.ТолькоПросмотр 	= Истина;
	Элементы.ДатаВвода.ТолькоПросмотр 		= Истина;
	Записать();     
	ПеречитатьДанныеНаКлиенте();	
	ПроверитьДатуВыбытияНаКлиенте();
	Если Открытие = Истина Тогда 
		Записать();
		Закрыть();    
	КонецЕсли;
	НомерГруппы = ПолучитьНомерНедели();    
	Возраст = (ТекущаяДата() - Запись.ДатаРождения) /(24*60*60);

КонецПроцедуры

&НаСервере
Функция ПолучитьНомерНедели()
	
	Перем МассивДат;
	
	МассивДат = ТЧОбщая.Выгрузить(,"ДатаСлучка"); 
	МассивДат.Сортировать("ДатаСлучка УБЫВ");
	Если МассивДат.Количество() > 0 Тогда
		//	Возврат НеделяГода(МассивДат[0].ДатаСлучка) + ПолучитьКонстантуКорректировкаНачалаГода();   
		Возврат _НастройкиКонфигурацииНаСервере.РасчетНомераНедели(МассивДат[0].ДатаСлучка,Константы.НачалоОтсчетаНомераНедели.Получить());
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонстантуКорректировкаНачалаГода()
	
	Возврат Константы.КорректировкаНачалаГода.Получить();

КонецФункции

&НаКлиенте
Процедура ПеречитатьДанныеНаКлиенте()  
	ЗаполнитьОбщуюТаблицуНаСервере();
	//ПолучитьДанныеКлючевыеЦифрыОпоросаНаСервере();  
	ПолучитьДанныеИнформацияНаСервере(); 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбщуюТаблицуНаСервере() 	
	РегистрыСведений.КарточкаСвиноматки.ЗаполнитьОбщуюТаблицу(Запись, ТЧОбщая, ТЧСлучка, ТЧСупоросность, ТЧАборт, ТЧОпоросы, ТЧОтъем, ТЧБрак);
	НаборЗаписей = РегистрыСведений.ЖурналОхот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Прочитать();  
	Если НаборЗаписей.Количество() > 0  Тогда
		Для Каждого СтрЗапись ИЗ НаборЗаписей Цикл 
			НоваяСтрока = ТЧЖурналОхот.Добавить();
			НоваяСтрока.ДатаСобытия = СтрЗапись.Период;
		КонецЦикла;
	КонецЕсли; 
	НаборЗаписей = РегистрыСведений.ПоследнееСобытие.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
	НаборЗаписей.Прочитать(); 
	Если НаборЗаписей.Количество() = 1 Тогда 
		Статус = НаборЗаписей[0].ПоследнееСобытие; 
	КонецЕсли;
КонецПроцедуры     



&НаСервере
Процедура ЗаполнитьРегистрКлючевыЦифрыОпоросаНаСервере(Знач НомерОпороса,Знач НомерЖивотного,Знач Период,Знач ДатаОпороса,Знач ДниСупоросности, Знач ДатаОтъема, Знач ПодсосныеДни, Знач ПотеряноКормодней, Знач ДатаАборта, Знач ДатаСлучки, Знач ВозрастОтъема)
	
	Перем РегистрКлючевыеЦифрыОпороса;
	
	РегистрКлючевыеЦифрыОпороса = РегистрыСведений.КлючевыеЦифрыОпороса.СоздатьНаборЗаписей();
	РегистрКлючевыеЦифрыОпороса.Отбор.НомерЖивотного.Установить(НомерЖивотного);
	РегистрКлючевыеЦифрыОпороса.Отбор.ДатаВвода.Установить(Период);
	РегистрКлючевыеЦифрыОпороса.Отбор.НомерОпороса.Установить(НомерОпороса);
	РегистрКлючевыеЦифрыОпороса.Отбор.ДатаСлучки.Установить(ДатаСлучки);
	РегистрКлючевыеЦифрыОпороса.Прочитать();  
	Если РегистрКлючевыеЦифрыОпороса.Количество() = 0 Тогда  
		НоваяЗапись = РегистрыСведений.КлючевыеЦифрыОпороса.СоздатьМенеджерЗаписи();
		НоваяЗапись.НомерЖивотного 	= НомерЖивотного;
		НоваяЗапись.ДатаВвода		= Период;
		НоваяЗапись.НомерОпороса	= НомерОпороса;
		НоваяЗапись.ДатаОпороса		= ДатаОпороса;
		НоваяЗапись.ДниСупоросности = ДниСупоросности;  
		НоваяЗапись.ДатаОтъема		= ДатаОтъема;
		НоваяЗапись.ПодсосныеДни	= ПодсосныеДни;  
		НоваяЗапись.ПотеряноКормодней = ПотеряноКормодней; 
		НоваяЗапись.ДатаАборта		  = ДатаАборта; 
		НоваяЗапись.ДатаСлучки		  = ДатаСлучки;  
		НоваяЗапись.ВозрастОтъема 	  = ВозрастОтъема; 
		НоваяЗапись.Записать(Истина);
	Иначе 
		РегистрКлючевыеЦифрыОпороса.Очистить();
		РегистрКлючевыеЦифрыОпороса.Записать();   
		НоваяЗапись = РегистрыСведений.КлючевыеЦифрыОпороса.СоздатьМенеджерЗаписи();
		НоваяЗапись.НомерЖивотного 	= НомерЖивотного;
		НоваяЗапись.ДатаВвода		= Период;
		НоваяЗапись.НомерОпороса	= НомерОпороса;
		НоваяЗапись.ДатаОпороса		= ДатаОпороса;
		НоваяЗапись.ДниСупоросности = ДниСупоросности;  
		НоваяЗапись.ДатаОтъема		= ДатаОтъема;
		НоваяЗапись.ПодсосныеДни	= ПодсосныеДни;  
		НоваяЗапись.ПотеряноКормодней = ПотеряноКормодней; 
		НоваяЗапись.ДатаАборта		  = ДатаАборта; 
		НоваяЗапись.ДатаСлучки		  = ДатаСлучки; 
		НоваяЗапись.ВозрастОтъема 	  = ВозрастОтъема; 
		НоваяЗапись.Записать(Истина);

		//Для Каждого НоваяЗапись ИЗ РегистрКлючевыеЦифрыОпороса Цикл
		//	НоваяЗапись = РегистрыСведений.КлючевыеЦифрыОпороса.СоздатьМенеджерЗаписи();
		//	НоваяЗапись.НомерЖивотного 	= НомерЖивотного;
		//	НоваяЗапись.ДатаВвода		= Период;
		//	НоваяЗапись.НомерОпороса	= НомерОпороса;
		//	НоваяЗапись.ДатаОпороса		= ДатаОпороса;
		//	НоваяЗапись.ДниСупоросности = ДниСупоросности;  
		//	НоваяЗапись.ДатаОтъема		= ДатаОтъема;
		//	НоваяЗапись.ПодсосныеДни	= ПодсосныеДни;
		//	НоваяЗапись.ПотеряноКормодней = ПотеряноКормодней; 
		//	НоваяЗапись.ДатаАборта		  = ДатаАборта;
		//	НоваяЗапись.ДатаСлучки		  = ДатаСлучки;
		//	НоваяЗапись.Записать(Истина);	
		//КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	Для каждого Стр из ТЧОбщая Цикл  
		Если Стр.ДатаСлучка <> Дата(1,1,1) Тогда
			НаборЗаписей = РегистрыСведений.ЖурналОсеменения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
			НаборЗаписей.Отбор.НомерОпороса.Установить(Стр.НомерОпороса);
			НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период); 
			НаборЗаписей.Отбор.Период.Установить(Стр.ДатаСлучка);
			НаборЗаписей.Прочитать(); 
			Для Каждого Записи Из НаборЗаписей Цикл
				Записи.НомерОпороса 		= Стр.НомерОпороса;  
				Записи.Период 				= Стр.ДатаСлучка;
				Записи.НомерЖивотногоХряк 	= Стр.НомерЖивотногоХряк;
				Записи.ОценкаСлучки         = Стр.ОценкаСлучки;
				Записи.Статус				= Стр.Статус; 
				Записи.УшнойВыщип			= Запись.УшнойВыщип;  
				Записи.КодПороды			= Запись.КодПороды;
				//Стр.ОценкаСлучки; 
			КонецЦикла;  
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение   
				Сообщить(ОписаниеОшибки()) ;
			КонецПопытки;
		КонецЕсли;
		
		Если Стр.ДатаАборта <> Дата(1,1,1) Тогда 
			НаборЗаписей = РегистрыСведений.Аборт.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
			НаборЗаписей.Отбор.Период.Установить(Стр.ДатаАборта);
			НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
			НаборЗаписей.Прочитать(); 		
			Для Каждого Записи Из НаборЗаписей Цикл
				Записи.НомерОпороса = Стр.НомерОпороса;  
				Записи.Период 		= Стр.ДатаАборта;
				Записи.Мачеха 		= Стр.Мачеха;	
				Записи.КодПороды	= Запись.КодПороды;
			КонецЦикла;  	
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение   
				Сообщить(ОписаниеОшибки()) ;
			КонецПопытки;
		КонецЕсли;
		
		Если Стр.ДатаУЗИ <> Дата(1,1,1) Тогда
			
			НаборЗаписей = РегистрыСведений.Супоросность.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
			НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);  
			НаборЗаписей.Отбор.Период.Установить(Стр.ДатаУЗИ);
			НаборЗаписей.Прочитать(); 
			
			Если НаборЗаписей.Количество() > 1 Тогда
				НаборЗаписей.Очистить();
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Период = Стр.ДатаУЗИ;
				НоваяЗапись.НомерОпороса = Стр.НомерОпороса; 
				НоваяЗапись.РезультатУЗИ = Стр.РезультатУЗИ;
				НоваяЗапись.НомерЖивотного = Запись.НомерЖивотного;
				НоваяЗапись.ДатаВвода	   = Запись.Период;	
			Иначе
				Для Каждого Записи Из НаборЗаписей Цикл
					Записи.НомерОпороса = Стр.НомерОпороса;  
					Записи.Период = Стр.ДатаУЗИ;
					Записи.РезультатУЗИ = Стр.РезультатУЗИ;			 
				КонецЦикла;	
			КонецЕсли;
			  	
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение   
				Сообщить(ОписаниеОшибки()) ;
			КонецПопытки;
		КонецЕсли;
		
		Если Стр.ДатаОпороса <> Дата(1,1,1) И (Стр.Живорожденные > 0  ИЛИ Стр.Мертвые > 0 )Тогда
			
			НаборЗаписей = РегистрыСведений.ЖурналОпороса.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
			НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
			НаборЗаписей.Отбор.НомерОпороса.Установить(Стр.НомерОпороса);
			НаборЗаписей.Прочитать(); 		
			Для Каждого Записи Из НаборЗаписей Цикл
				Записи.НомерОпороса 		= Стр.НомерОпороса;  
				Записи.Период 				= Стр.ДатаОпороса;
				Записи.Живорожденные 		= Стр.Живорожденные;
				Записи.Мертвые 				= Стр.Мертвые;  
				Записи.Слаборожденные		= Стр.Слаборожденные;
				Записи.Муммии 				= Стр.Муммии;
				Записи.ПереведеноПоросят 	= Стр.ПереведеноПоросят;
				Записи.IDГнезда 			= Стр.IDГнезда;	
				Записи.МассаВсего 			= Стр.МассаВсегоОпорос;
				Записи.СреднийВес 			= СТр.СреднийВесОпорос; 
				Записи.КодПороды			= Запись.КодПороды;
			КонецЦикла;  	
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение   
				Сообщить(ОписаниеОшибки()) ;
			КонецПопытки;
		КонецЕсли;
		
		//Отъем
		//	Если Стр.ДатаОпороса <= ТекущаяДата() Тогда
		//		НаборЗаписей = РегистрыСведений.ЖурналОтъема.СоздатьНаборЗаписей(); 
		//	    НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
		//		НаборЗаписей.Отбор.НомерОпороса.Установить(Стр.НомерОпороса);
		//		НаборЗаписей.Прочитать();
		//	
		//		Запрос = Новый Запрос;
		//		Запрос.Текст = 
		//			"ВЫБРАТЬ
		//			|	ЖурналОтъемаСрезПоследних.Период КАК Период
		//			|ИЗ
		//			|	РегистрСведений.ЖурналОтъема.СрезПоследних КАК ЖурналОтъемаСрезПоследних
		//			|ГДЕ
		//			|	ЖурналОтъемаСрезПоследних.НомерЖивотного = &НомерЖивотного
		//			|	И ЖурналОтъемаСрезПоследних.НомерОпороса = &НомерОпороса";
		//		
		//		Запрос.УстановитьПараметр("НомерЖивотного", Запись.НомерЖивотного);
		//		Запрос.УстановитьПараметр("НомерОпороса", Стр.НомерОпороса);	
		//		РезультатЗапроса = Запрос.Выполнить();	
		//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		//		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		//			Для Каждого Записи Из НаборЗаписей Цикл
		//				Записи.НомерОпороса = Стр.НомерОпороса;
		//				Записи.НомерЖивотного = Запись.НомерЖивотного;
		//				ПодсосныйПериод = Константы.ПодсосныйПериодСвиноматки.Получить();
		//		    	//Записи.Период = Стр.ДатаОпороса + ПодсосныйПериод * 60 * 60 * 24;
		//			КонецЦикла;
		//			НаборЗаписей.Записать();
		//		Иначе
		//			НоваяЗапись = НаборЗаписей.Добавить();
		//			НоваяЗапись.НомерОпороса = Стр.НомерОпороса;
		//		    НоваяЗапись.НомерЖивотного = Запись.НомерЖивотного;
		//			ПодсосныйПериод = Константы.ПодсосныйПериодСвиноматки.Получить();
		//		    НоваяЗапись.Период = Стр.ДатаОпороса + ПодсосныйПериод * 60 * 60 * 24;
		//		    НаборЗаписей.Записать();
		//  		КонецЕсли;
		//	КонецЕсли;
		//КонецЦикла; 
		//
		//Для каждого Стр из ТЧПодсосныеПоросята Цикл
		//	НаборЗаписей = РегистрыСведений.ПадежПоросят.СоздатьНаборЗаписей();
		//	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
		//	НаборЗаписей.Отбор.НомерОпороса.Установить(Стр.НомерОпороса);
		//	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
		//	НаборЗаписей.Прочитать(); 		
		//	Для Каждого Записи Из НаборЗаписей Цикл
		//		Записи.НомерОпороса = Стр.НомерОпороса;  
		//		Записи.КоличествоМертвых = Стр.Падеж;	
		//	КонецЦикла;  	
		//	НаборЗаписей.Записать(); 
		//	НаборЗаписей1 = РегистрыСведений.ПереводПоросят.СоздатьНаборЗаписей();
		//	НаборЗаписей1.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
		//	НаборЗаписей1.Отбор.НомерОпороса.Установить(Стр.НомерОпороса);
		//	НаборЗаписей1.Отбор.ДатаВвода.Установить(Запись.Период);
		//	НаборЗаписей1.Прочитать(); 		
		//	Для Каждого Записи Из НаборЗаписей1 Цикл
		//		Записи.НомерОпороса = Стр.НомерОпороса;  
		//		Записи.КоличествоПереведенных = Стр.Перевод;	
		//	КонецЦикла;  	
		//	НаборЗаписей1.Записать(); 
		//КонецЦикла;
		//
		//Для каждого Стр из ТЧОтъем Цикл  
		Если Стр.ДатаОтъема <> Дата(1,1,1) Тогда
			НаборЗаписей = РегистрыСведений.ЖурналОтъема.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
			НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
			НаборЗаписей.Отбор.Период.Установить(Стр.ДатаОтъема);
			НаборЗаписей.Отбор.Мачеха.Установить(Стр.Мачеха);
			НаборЗаписей.Прочитать(); 		
			Для Каждого Записи Из НаборЗаписей Цикл
				Записи.НомерОпороса = Стр.НомерОпороса;  
				Записи.Период = Стр.ДатаОтъема;
				Записи.КоличествоОтъемышей = Стр.КоличествоОтъемышей;
				Записи.МассаВсего = Стр.МассаВсего;
				Записи.СреднийВес = Стр.СреднийВес;
				Записи.Мачеха = Стр.Мачеха;		
			КонецЦикла;  	
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение   
				Сообщить(ОписаниеОшибки()) ;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла; 
	ЗаписьВыбраковкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТЧСупоросностьРезультатУЗИПриИзмененииНаСервере() 
	Для Каждого Стр из ТЧСупоросность Цикл 
		Если Стр.РезультатУЗИ = Перечисления.РезультатУЗИ.Позитивный Тогда 
			НаборЗаписей = РегистрыСведений.ЖурналОпороса.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
			НаборЗаписей.Отбор.НомерОпороса.Установить(Стр.НомерОпороса);
			НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
			НаборЗаписей.Записать();
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТЧСупоросностьРезультатУЗИПриИзменении(Элемент)
	ТЧСупоросностьРезультатУЗИПриИзмененииНаСервере();
КонецПроцедуры 

&НаСервере
Процедура ТЧСлучкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерОпороса = Запись.НомерОпороса + 1;
	КонецЕсли;      
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыбытиеПриИзменении(Элемент)
	ПеречитатьДанныеНаСервере();
	ПеречитатьДанныеНаКлиенте();
	ВыбытиеСатусНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыбытиеСатусНаСервере();
	НаборЗаписей = РегистрыСведений.ПоследнееСобытие.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0  Тогда
		ЗаписьСтатус = РегистрыСведений.ПоследнееСобытие.СоздатьМенеджерЗаписи();
		ЗаписьСтатус.ДатаВвода 		= Запись.Период;
		ЗаписьСтатус.НомерЖивотного = Запись.НомерЖивотного;
		ЗаписьСтатус.ДатаПоследнегоСобытия =  Запись.ДатаВыбытие;  
		ЗаписьСтатус.ПоследнееСобытие = Перечисления.ПоследнееСобытие.Выбытие;  
		ЗаписьСтатус.НомерОпороса     = Запись.НомерОпороса;
		ЗаписьСтатус.Записать(Истина);
	Иначе                             
		Для Каждого ЗаписьСтатус ИЗ НаборЗаписей Цикл
			Если Запись.ДатаВыбытие >= ЗаписьСтатус.ДатаПоследнегоСобытия Тогда
				ЗаписьСтатус.ДатаВвода 		= Запись.Период;
				ЗаписьСтатус.НомерЖивотного = Запись.НомерЖивотного;
				ЗаписьСтатус.ДатаПоследнегоСобытия =  Запись.ДатаВыбытие;  
				ЗаписьСтатус.ПоследнееСобытие = Перечисления.ПоследнееСобытие.Выбытие;  
				ЗаписьСтатус.НомерОпороса     = Запись.НомерОпороса;
			КонецЕсли;	
		КонецЦикла; 
		НаборЗаписей.Записать(Истина);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатуВыбытияНаКлиенте()
	
	Если Запись.ДатаВыбытие <> Дата('00010101000000') Тогда 
		Элементы.ТЧОбщая.ТолькоПросмотр 				= Истина; 
		Элементы.ФормаСменитьНомерЖивотного.Доступность = Ложь; 
		Элементы.ГруппаВыбытие.ТолькоПросмотр					= Истина; 
	Иначе 
		Элементы.ТЧОбщая.ТолькоПросмотр 				= Ложь; 
		Элементы.ФормаСменитьНомерЖивотного.Доступность = Истина;
		Элементы.ГруппаВыбытие.ТолькоПросмотр					= Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяПриИзменении(Элемент) 
	//ТекДанные = Элемент.ТекущиеДанные; 
	//Если ТекДанные.ДатаСлучка <> Дата(1,1,1) Тогда 
	//	ЗаписатьДанныеСлучкиНаСервере(ТекДанные.НомерОпороса,ТекДанные.ДатаСлучка,ТекДанные.НомерЖивотногоХряк,ТекДанные.ОценкаСлучки,ТекДанные.Статус, ТекДанные.НазваниеПородыХряк);
	//КонецЕсли;
	//Если ТекДанные.ДатаУЗИ <> Дата(1,1,1) Тогда 
	//	ЗаписатьДанныеУЗИНаСервере(ТекДанные.НомерОпороса, ТекДанные.ДатаУЗИ, ТекДанные.РезультатУЗИ);
	//КонецЕсли;
	//Если ТекДанные.ДатаАборта <> Дата(1,1,1) Тогда 
	//	ЗаписатьДанныеАбортаНаСервере(ТекДанные.НомерОпороса, ТекДанные.ДатаАборта);  
	//КонецЕсли;                           
	//Если ТекДанные.ДатаОпороса <> Дата(1,1,1) Тогда 
	//	ЗаписатьДанныеОпоросНаСервере(ТекДанные.ДатаОпороса,ТекДанные.НомерОпороса,ТекДанные.Живорожденные,ТекДанные.Мертвые,ТекДанные.Слаборожденные,ТекДанные.Муммии,ТекДанные.Свинки,ТекДанные.МассаВсего,ТекДанные.СреднийВес,ТекДанные.ПереведеноПоросят, ТекДанные.IDГнезда)
	//КонецЕсли;                            
	//Если ТекДанные.ДатаОтъема <> Дата(1,1,1) Тогда 
	//	ЗапистьДанныеОтъемНаСервере(ТекДанные.ДатаОтъема,ТекДанные.НомерОпороса,ТекДанные.КоличествоОтъемышей, ТекДанные.МассаВсего, ТекДанные.СреднийВес, ТекДанные.Мачеха);
	//КонецЕсли;         
КонецПроцедуры

&НаСервере
Процедура ЗапистьДанныеОтъемНаСервере(ДатаОтъема,НомерОпороса,КоличествоОтъемышей, МассаВсего, СреднийВес, Мачеха, ВозрастПриПодсадке, ТолщинаШпика)
	НаборЗаписей = РегистрыСведений.ЖурналОтъема.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);    
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаОтъема);
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса);
	НаборЗаписей.Отбор.Мачеха.Установить(ТекСтрокаФорма.Мачеха); 
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() = 0 Тогда  
		//СоздатьЗаписиОтъемНаСервере(ДатаОтъема,НомерОпороса,КоличествоОтъемышей, МассаВсего, СреднийВес, Мачеха, ВозрастПриПодсадке);
		СоздатьЗаписиОтъемНаСервере(ДатаОтъема,0,КоличествоОтъемышей, МассаВсего, СреднийВес, Мачеха, ВозрастПриПодсадке, ТолщинаШпика);
	Иначе		
		Для Каждого Записи Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(Записи);			
		КонецЦикла; 
		НаборЗаписей.Записать();
		СоздатьЗаписиОтъемНаСервере(ДатаОтъема,НомерОпороса,КоличествоОтъемышей, МассаВсего, СреднийВес, Мачеха, ВозрастПриПодсадке, ТолщинаШпика);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьЗаписиОтъемНаСервере(ДатаОтъема,НомерОпороса,КоличествоОтъемышей, МассаВсего, СреднийВес, Мачеха, ВозрастПриПодсадке, ТолщинаШпика)	
	Перем Записи;
	
	Записи = РегистрыСведений.ЖурналОтъема.СоздатьМенеджерЗаписи();
	Записи.НомерОпороса	= НомерОпороса;
	Записи.Период		= ДатаОтъема;
	Записи.НомерЖивотного = Запись.НомерЖивотного;
	Записи.ДатаВвода	  = Запись.Период;  //Дописать  
	Записи.Мачеха		  = Мачеха;
	Записи.КоличествоОтъемышей	= КоличествоОтъемышей;
	Записи.МассаВсего 			= МассаВсего;
	Записи.СреднийВес		  	= СреднийВес;
	Записи.ВозрастПриПодсадке   = ВозрастПриПодсадке; 
	Записи.ТолщинаШпика			= ТолщинаШпика;
	Записи.Записать();
КонецПроцедуры


&НаСервере
Процедура ЗаписатьДанныеОпоросНаСервере(ДатаОпороса,НомерОпороса,Живорожденные,Мертвые,Слаборожденные,Муммии,Свинки,МассаВсего,СреднийВес,ПереведеноПоросят,IDГнезда,Место,КоличествоСосков,ТолщинаШпика) 
	НаборЗаписей = РегистрыСведений.ЖурналОпороса.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);    
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаОпороса);
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса); 
	НаборЗаписей.Отбор.IDГнезда.Установить(ТекСтрокаФорма.IDГнезда);
	НаборЗаписей.Отбор.Место.Установить(ТекСтрокаФорма.МестоОпорос);
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() = 0 Тогда  
		//СоздатьЗаписиОпоросНаСервере(ДатаОпороса,НомерОпороса,Живорожденные,Мертвые,Слаборожденные,Муммии,Свинки,МассаВсего,СреднийВес,ПереведеноПоросят,IDГнезда);
		СоздатьЗаписиОпоросНаСервере(ДатаОпороса,0,Живорожденные,Мертвые,Слаборожденные,Муммии,Свинки,МассаВсего,СреднийВес,ПереведеноПоросят,IDГнезда,Место,КоличествоСосков,ТолщинаШпика);
	Иначе		
		Для Каждого Записи Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(Записи);			
		КонецЦикла; 
		НаборЗаписей.Записать();
		СоздатьЗаписиОпоросНаСервере(ДатаОпороса,НомерОпороса,Живорожденные,Мертвые,Слаборожденные,Муммии,Свинки,МассаВсего,СреднийВес,ПереведеноПоросят,IDГнезда,Место,КоличествоСосков,ТолщинаШпика);
	КонецЕсли;	
КонецПроцедуры    

&НаСервере
Процедура СоздатьЗаписиОпоросНаСервере(ДатаОпороса,НомерОпороса,Живорожденные,Мертвые,Слаборожденные,Муммии,Свинки,МассаВсего,СреднийВес,ПереведеноПоросят,IDГнезда,Место,КоличествоСосков,ТолщинаШпика) 
	
	Перем Записи;
	
	Записи = РегистрыСведений.ЖурналОпороса.СоздатьМенеджерЗаписи();
	Записи.НомерОпороса	  		= НомерОпороса;
	Записи.Период		  		= ДатаОпороса;
	Записи.НомерЖивотного 		= Запись.НомерЖивотного;
	Записи.ДатаВвода	  		= Запись.Период;  //Дописать  
	Записи.IDГнезда		  		= IDГнезда;
	Записи.Живорожденные  		= Живорожденные;  
	Записи.КодПороды	  		= Запись.КодПороды;
	Записи.Мертвые		  		= Мертвые;
	Записи.Слаборожденные 		= Слаборожденные;
	Записи.Муммии		  		= Муммии;
	Записи.Свинки		  		= Свинки;
	Записи.МассаВсего     		= МассаВсего;
	Записи.СреднийВес	  		= СреднийВес; 
	Записи.Место		  		= Место;
	Записи.КоличествоСосков 	= КоличествоСосков;
	Записи.ТолщинаШпика			= ТолщинаШпика;
	Записи.ПереведеноПоросят 	= ПереведеноПоросят;
	Записи.Записать();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеАбортаНаСервере(Знач НомерОпороса, Знач ДатаАборта)
	
	Перем Записи, НаборЗаписей;
	
	НаборЗаписей = РегистрыСведений.Аборт.СоздатьНаборЗаписей();  
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаАборта);
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() = 0 Тогда  
		СоздатьЗаписиАбортНаСервере(НомерОпороса, ДатаАборта);
	Иначе		
		Для Каждого Записи Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(Записи);			
		КонецЦикла; 
		НаборЗаписей.Записать();
		СоздатьЗаписиАбортНаСервере(НомерОпороса, ДатаАборта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписиАбортНаСервере(Знач НомерОпороса, Знач ДатаАборта)
	
	Перем Записи;
	
	Записи = РегистрыСведений.Аборт.СоздатьМенеджерЗаписи();
	Записи.НомерОпороса 		= НомерОпороса; 
	Записи.Период 				= ДатаАборта;
	Записи.НомерЖивотного 		= Запись.НомерЖивотного; 
	Записи.ДатаВвода			= Запись.Период;    
	Записи.КодПороды			= Запись.КодПороды;
	Записи.Записать()
	
КонецПроцедуры  

&Насервере
Процедура ЗаписатьДанныеУЗИНаСервере(НомерОпороса, ДатаУЗИ, РезультатУЗИ, Место, Работник, ТолщинаШпика)
	НаборЗаписей = РегистрыСведений.Супоросность.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);  
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаУЗИ);
	НаборЗаписей.Отбор.РезультатУЗИ.Установить(ТекСтрокаФорма.РезультатУЗИ); 
	НаборЗаписей.Отбор.Работник.Установить(ТекСтрокаФорма.РаботникСупоросность);
	НаборЗаписей.Отбор.Место.Установить(ТекСтрокаФорма.МестоСупоросность);
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() = 0 Тогда  
		СоздатьЗаписьУЗИНаСервере(НомерОпороса,ДатаУЗИ, РезультатУЗИ, Место, Работник, ТолщинаШпика);
	Иначе		
		Для Каждого Записи Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(Записи);			
		КонецЦикла; 
		НаборЗаписей.Записать();
		СоздатьЗаписьУЗИНаСервере(НомерОпороса, ДатаУЗИ, РезультатУЗИ, Место, Работник, ТолщинаШпика);
	КонецЕсли;	
КонецПроцедуры 

&НаСервере
Процедура СоздатьЗаписьУЗИНаСервере(НомерОпороса, ДатаУЗИ, РезультатУЗИ, Место, Работник, ТолщинаШпика)
	Записи = РегистрыСведений.Супоросность.СоздатьМенеджерЗаписи();
	Записи.НомерОпороса 		= НомерОпороса; 
	Записи.Период 				= ДатаУЗИ;
	Записи.НомерЖивотного 		= Запись.НомерЖивотного; 
	Записи.ДатаВвода			= Запись.Период; 
	Записи.РезультатУЗИ			= РезультатУЗИ; 
	Записи.Место				= Место;
	Записи.Работник				= Работник;
	Записи.ТолщинаШпика			= ТолщинаШпика;
	Записи.Записать()	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеСлучкиНаСервере(НомерОпороса,ДатаСлучка,НомерЖивотногоХряк,ОценкаСлучки,Статус, КодПороды, Работник, НомерЖивотногоХряк1, НомерЖивотногоХряк2, КодПороды1, КодПороды2)   
	НаборЗаписей = РегистрыСведений.ЖурналОсеменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса); 
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаСлучка);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период); 
	НаборЗаписей.Отбор.НомерЖивотногоХряк.Установить(ТекСтрокаФорма.НомерЖивотногоХряк);
	НаборЗаписей.Отбор.НомерЖивотногоХряк1.Установить(ТекСтрокаФорма.НомерЖивотногоХряк1); 
	НаборЗаписей.Отбор.НомерЖивотногоХряк2.Установить(ТекСтрокаФорма.НомерЖивотногоХряк2);
	НаборЗаписей.Отбор.ОценкаСлучки.Установить(ТекСтрокаФорма.ОценкаСлучки);
	НаборЗаписей.Отбор.Статус.Установить(ТекСтрокаФорма.Статус);
	НаборЗаписей.Отбор.Работник.Установить(ТекСтрокаФорма.Работник);
 	НаборЗаписей.Прочитать();   
	Если НаборЗаписей.Количество() = 0 Тогда  
		СоздатьЗаписьЖурналаОсемененияНаСервере(ДатаСлучка, НомерЖивотногоХряк, НомерОпороса, ОценкаСлучки, Статус, КодПороды, Работник, НомерЖивотногоХряк1, НомерЖивотногоХряк2, КодПороды1, КодПороды2);
	Иначе		
		Для Каждого Записи Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(Записи);			
		КонецЦикла; 
		НаборЗаписей.Записать();
		СоздатьЗаписьЖурналаОсемененияНаСервере(ДатаСлучка, НомерЖивотногоХряк, НомерОпороса, ОценкаСлучки, Статус, КодПороды, Работник, НомерЖивотногоХряк1, НомерЖивотногоХряк2, КодПороды1, КодПороды2);
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьЖурналаОсемененияНаСервере(Знач ДатаСлучка, Знач НомерЖивотногоХряк, Знач НомерОпороса, Знач ОценкаСлучки, Знач Статус, Знач КодПороды, Знач Работник ,
													Знач НомерЖивотногоХряк1, Знач НомерЖивотногоХряк2, Знач КодПороды1, Знач КодПороды2)
	
	Перем Записи;
	
	Записи = РегистрыСведений.ЖурналОсеменения.СоздатьМенеджерЗаписи();
	Записи.НомерОпороса 		= НомерОпороса; 
	Записи.Период 				= ДатаСлучка;
	Записи.НомерЖивотного 		= Запись.НомерЖивотного; 
	Записи.КодПороды			= Запись.КодПороды;
	Записи.ДатаВвода			= Запись.Период; 
	Записи.НомерЖивотногоХряк 	= НомерЖивотногоХряк;
	Записи.КодПородыХряк		= КодПороды;    
	Записи.НомерЖивотногоХряк1 	= НомерЖивотногоХряк1;
	Записи.КодПородыХряк1		= КодПороды1;
	Записи.НомерЖивотногоХряк2 	= НомерЖивотногоХряк2;
	Записи.КодПородыХряк2		= КодПороды2;
	Записи.ОценкаСлучки 		= ОценкаСлучки;
	Записи.Статус 				= Статус;
	Записи.Работник				= Работник;
	Записи.Записать()
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяПередНачаломИзменения(Элемент, Отказ)
	ТекСтрокаФорма  = СтруктураДанных(Элемент);
КонецПроцедуры 

&НаКлиенте
Функция СтруктураДанных(ТаблицаФормы)
	
	Перем Результат, ТД;
	
	Результат = Новый Структура;
	
	Если НЕ ТаблицаФормы = Неопределено Тогда
		ТД = ТаблицаФормы.ТекущиеДанные;
		Для Каждого Колонка Из КолонкиТаблицы(ТаблицаФормы.Имя) Цикл
			Результат.Вставить(Колонка, ?(ТД = Неопределено, Неопределено, ТД[Колонка]));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция КолонкиТаблицы(ИмяТаблицы)
	
	Перем Результат, Реквизит;
	
	Результат = Новый Массив;
	
	Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты(ИмяТаблицы) Цикл
		Результат.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ТЧОбщаяПередУдалением(Элемент, Отказ) 
	ТекСтрокаФорма  = СтруктураДанных(Элемент);
	ТекДанные = Элемент.ТекущиеДанные;    
	РезультатВопроса = Вопрос("Удалить данные " + СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"ТЧОбщаяДата","")+"?",РежимДиалогаВопрос.ДаНет);
	Если РезультатВопроса =  КодВозвратаДиалога.Да Тогда
		Если ТЧОбщая.Количество() = (ТчОбщая.Индекс(Элемент.ТекущиеДанные) + 1) Тогда
			Если СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"ТЧОбщая","") = "ДатаСлучка"  Тогда
				Если ТекДанные.Живорожденные = 0 Тогда
					УдалитьДанныеСлучкаНаСервере();  
					_НастройкиКонфигурацииНаСервере.ЗаписьДанныхРегистраВЖурналРегистрацийПриУдалении("РегистрСведенийНаборЗаписей.ЖурналОсеменения",Запись.НомерЖивотного,ТекДанные.ДатаСлучка,"УдалениеИзКарточки");
				Иначе 
					Предупреждение("Сначала удалите опорос",,"Внимание");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"ТЧОбщая","") = "ДатаУЗИ" Тогда 
				УдалитьДанныеУЗИНаСервере();	
			КонецЕсли;  
			
			Если СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"ТЧОбщая","") = "ДатаАборта"  Тогда 
				УдалитьДанныеАбортНаСервере();	
			КонецЕсли; 
			Если СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"ТЧОбщая","") = "ДатаОпороса" Тогда 
				Если ТекДанные.ДатаОтъема = '00010101' Тогда
					УдалитьДанныеОпоросНаСервере();	
					_НастройкиКонфигурацииНаСервере.ЗаписьДанныхРегистраВЖурналРегистрацийПриУдалении("РегистрСведенийНаборЗаписей.ЖурналОпороса",Запись.НомерЖивотного,ТекДанные.ДатаОпороса,"УдалениеИзКарточки");
				Иначе                                
					Предупреждение("Сначала удалите отъем",,"Внимание");
				КонецЕсли;
			КонецЕсли;                            
			Если СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"ТЧОбщая","") = "ДатаОтъема"  Тогда 
				УдалитьДанныеОтъемНаСервере(); 
				_НастройкиКонфигурацииНаСервере.ЗаписьДанныхРегистраВЖурналРегистрацийПриУдалении("РегистрСведенийНаборЗаписей.ЖурналОтъема",Запись.НомерЖивотного,ТекДанные.ДатаОтъема,"УдалениеИзКарточки");
			КонецЕсли; 
			ПеречитатьДанныеНаСервере();
			ПеречитатьДанныеНаКлиенте(); 
			ОбновитьСтатусНаСервере();  
		Иначе
			Предупреждение("Не удалены данные последующей случки",,"Внимание");
		КонецЕсли;
	КонецЕсли;
	ТекСтрокаФорма  = Неопределено;
	Отказ = Истина;
КонецПроцедуры 

&НаСервере
Процедура УдалитьДанныеОтъемНаСервере()
	
	НаборЗаписей = РегистрыСведений.ЖурналОтъема.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);    
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаОтъема);
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса);
	НаборЗаписей.Отбор.Мачеха.Установить(ТекСтрокаФорма.Мачеха); 
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() <> 0 Тогда  
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина)
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеОпоросНаСервере()
	
	НаборЗаписей = РегистрыСведений.ЖурналОпороса.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);    
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаОпороса);
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса); 
	НаборЗаписей.Отбор.IDГнезда.Установить(ТекСтрокаФорма.IDГнезда);
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() <> 0 Тогда  
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина)
	КонецЕсли
	
КонецПроцедуры


&НаСервере
Процедура УдалитьДанныеАбортНаСервере()
	
	Перем Записи, НаборЗаписей;
	
	НаборЗаписей = РегистрыСведений.Аборт.СоздатьНаборЗаписей();  
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаАборта);
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() <> 0 Тогда  
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина)
	КонецЕсли 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеСлучкаНаСервере()
	
	Перем Записи, НаборЗаписей;
	
	НаборЗаписей = РегистрыСведений.ЖурналОсеменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерОпороса.Установить(ТекСтрокаФорма.НомерОпороса); 
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаСлучка);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период); 
	НаборЗаписей.Отбор.НомерЖивотногоХряк.Установить(ТекСтрокаФорма.НомерЖивотногоХряк); 
	НаборЗаписей.Отбор.ОценкаСлучки.Установить(ТекСтрокаФорма.ОценкаСлучки);
	НаборЗаписей.Отбор.Статус.Установить(ТекСтрокаФорма.Статус);	
	НаборЗаписей.Прочитать();   
	Если НаборЗаписей.Количество() <> 0 Тогда  
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеУЗИНаСервере()
	
	Перем Записи, НаборЗаписей;
	
	НаборЗаписей = РегистрыСведений.Супоросность.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного); 
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);  
	НаборЗаписей.Отбор.Период.Установить(ТекСтрокаФорма.ДатаУЗИ);
	НаборЗаписей.Отбор.РезультатУЗИ.Установить(ТекСтрокаФорма.РезультатУЗИ);
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() <> 0 Тогда  
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования) 
	Если НЕ МачехаФорма Тогда
		ТекДанные = Элемент.ТекущиеДанные; 
		Если ТекДанные.ДатаСлучка <> Дата(1,1,1) Тогда 
			ЗаписатьДанныеСлучкиНаСервере(ТекДанные.НомерОпороса,ТекДанные.ДатаСлучка,ТекДанные.НомерЖивотногоХряк,ТекДанные.ОценкаСлучки,ТекДанные.Статус, ТекДанные.НазваниеПородыХряк, ТекДанные.Работник,
											ТекДанные.НомерЖивотногоХряк1,ТекДанные.НомерЖивотногоХряк2, ТекДанные.НазваниеПородыХряк1, ТекДанные.НазваниеПородыХряк2);
			ПеречитатьДанныеНаСервере();
			ПеречитатьДанныеНаКлиенте();
		КонецЕсли;
		Если ТекДанные.ДатаУЗИ <> Дата(1,1,1) И ТекДанные.ДатаУЗИ > ТекДанные.ДатаСлучка Тогда 
			ЗаписатьДанныеУЗИНаСервере(ТекДанные.НомерОпороса, ТекДанные.ДатаУЗИ, ТекДанные.РезультатУЗИ, ТекДанные.МестоСупоросность,ТекДанные.РаботникСупоросность, ТекДанные.ТолщинаШпикаСупоросность);
			ПеречитатьДанныеНаСервере();
			ПеречитатьДанныеНаКлиенте(); 
		ИначеЕсли ТекДанные.ДатаУЗИ <> Дата(1,1,1) Тогда 
			Сообщить("Дата узи не может быть меньше или равной дате случки");
			ТекДанные.ДатаУЗИ = Дата(1,1,1);			
		КонецЕсли;
		Если ТекДанные.ДатаАборта <> Дата(1,1,1) И ТекДанные.ДатаАборта > ТекДанные.ДатаСлучка  Тогда 
			ЗаписатьДанныеАбортаНаСервере(ТекДанные.НомерОпороса, ТекДанные.ДатаАборта);
			ПеречитатьДанныеНаСервере();
			ПеречитатьДанныеНаКлиенте();
		ИначеЕсли ТекДанные.ДатаАборта <> Дата(1,1,1) Тогда  
			Сообщить("Дата аборта не может быть меньше или равной дате случки");
			ТекДанные.ДатаАборта = Дата(1,1,1);
		КонецЕсли;                           
		
		Если ТекДанные.ДатаОпороса <> Дата(1,1,1) И (ТекДанные.Живорожденные > 0 ИЛИ ТекДанные.Мертвые > 0 ) Тогда 
			ЗаписатьДанныеОпоросНаСервере(ТекДанные.ДатаОпороса,ТекДанные.НомерОпороса,ТекДанные.Живорожденные,ТекДанные.Мертвые,ТекДанные.Слаборожденные,ТекДанные.Муммии,ТекДанные.Свинки,ТекДанные.МассаВсегоОпорос,ТекДанные.СреднийВесОпорос,ТекДанные.ПереведеноПоросят,
											ТекДанные.IDГнезда, ТекДанные.МестоОпорос,ТекДанные.КоличествоСосков,ТекДанные.ТолщинаШпикаОпорос);
			ПеречитатьДанныеНаСервере();
			ПеречитатьДанныеНаКлиенте();   
		КонецЕсли;                            
		
		Если ТекДанные.ДатаОтъема <> Дата(1,1,1) Тогда 
			ЗапистьДанныеОтъемНаСервере(ТекДанные.ДатаОтъема,ТекДанные.НомерОпороса,ТекДанные.КоличествоОтъемышей, ТекДанные.МассаВсего, ТекДанные.СреднийВес, ТекДанные.Мачеха, ТекДанные.ВозрастПриПодсадке, ТекДанные.ТолщинаШпикаОтъем);
			ПеречитатьДанныеНаСервере();
			ПеречитатьДанныеНаКлиенте();
		КонецЕсли; 
		//----------------------------------------------   
		Если ТекДанные.Брак Тогда
		  ЗапистьДанныеБракНаСервере(ТекущаяДата(),ТекДанные.НомерОпороса,ТекДанные.Брак);
		  ПеречитатьДанныеНаСервере();
		  ПеречитатьДанныеНаКлиенте(); 
	    Иначе
		  УдалитьДанныеБракНаСервере(ТекДанные.ДатаБрака,ТекДанные.НомерОпороса,ТекДанные.Брак);
		  ПеречитатьДанныеНаСервере();
		  ПеречитатьДанныеНаКлиенте();
        КонецЕсли;
		//----------------------------------------------
	Иначе 
		ТекДанные = Элемент.ТекущиеДанные;
		ЗапистьДанныеОтъемНаСервере(ТекДанные.ДатаОтъема,ТекДанные.НомерОпороса,ТекДанные.КоличествоОтъемышей, ТекДанные.МассаВсего, ТекДанные.СреднийВес, ТекДанные.Мачеха, ТекДанные.ВозрастПриПодсадке, ТекДанные.ТолщинаШпикаОтъем);
	КонецЕсли;
	МачехаФорма = Ложь;
	ТекСтрокаФорма = Неопределено;
КонецПроцедуры


&НаСервере
Процедура ЗапистьДанныеБракНаСервере(ДатаБрака,НомерОпороса,Брак)
	НаборЗаписей = РегистрыСведений.ЖурналБрака.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);    
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.Период.Установить(ДатаБрака);
	НаборЗаписей.Отбор.НомерОпороса.Установить(НомерОпороса);
	НаборЗаписей.Отбор.Брак.Установить(Брак); 
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() = 0 Тогда  
		//СоздатьЗаписиОтъемНаСервере(ДатаОтъема,НомерОпороса,КоличествоОтъемышей, МассаВсего, СреднийВес, Мачеха, ВозрастПриПодсадке);
		СоздатьЗаписиБракНаСервере(ДатаБрака,НомерОпороса,Брак);
	Иначе		
		Для Каждого Записи Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(Записи);			
		КонецЦикла; 
		НаборЗаписей.Записать();
		СоздатьЗаписиБракНаСервере(ДатаБрака,НомерОпороса,Брак);
	КонецЕсли;	
КонецПроцедуры  
	
&НаСервере
Процедура УдалитьДанныеБракНаСервере(ДатаБрака,НомерОпороса,Брак)
	НаборЗаписей = РегистрыСведений.ЖурналБрака.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);    
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.Период.Установить(ДатаБрака);
	НаборЗаписей.Отбор.НомерОпороса.Установить(НомерОпороса);
	НаборЗаписей.Отбор.Брак.Установить(Истина); 
	НаборЗаписей.Прочитать(); 		
	Если НаборЗаписей.Количество() <> 0 Тогда  
		Для Каждого Записи Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(Записи);			
		КонецЦикла; 
		НаборЗаписей.Записать();
	КонецЕсли;	
КонецПроцедуры 	
	

&НаСервере
Процедура СоздатьЗаписиБракНаСервере(ДатаБрака,НомерОпороса,Брак)	
	Перем Записи;
	
	Записи = РегистрыСведений.ЖурналБрака.СоздатьМенеджерЗаписи();
	Записи.НомерОпороса	= НомерОпороса;
	Записи.Период		= ДатаБрака;
	Записи.НомерЖивотного = Запись.НомерЖивотного;
	Записи.ДатаВвода	  = Запись.Период;  //Дописать  
	Записи.Брак		  	  = Брак;
	Записи.Записать();
КонецПроцедуры
	
	




&НаКлиенте
Процедура ТЧОбщаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрокаФорма  = СтруктураДанных(Элемент); 
	Если НоваяСтрока Тогда 
		Элемент.ТекущиеДанные.НомерОпороса = Запись.НомерОпороса;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяМачехаПриИзменении(Элемент)
	Мачеха = Элементы.ТЧОбщая.ТекущиеДанные.Мачеха;
	Если Мачеха Тогда
		НоваяСтрока  = ТЧОбщая.Добавить();
		НоваяСтрока.НомерОпороса = Элементы.ТЧОбщая.ТекущиеДанные.НомерОпороса;
		МачехаФорма = Мачеха;
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Для Каждого Стр ИЗ ТЧОбщая Цикл  
		ДатаОпороса = '00010101000000';
		Если Стр.Живорожденные > 0 ИЛИ Стр.Мертвые Тогда 
			ДатаОпороса = Стр.ДатаОпороса;
		КонецЕсли;
		ЗаполнитьРегистрКлючевыЦифрыОпоросаНаСервере(Стр.НомерОпороса,Запись.НомерЖивотного,Запись.Период,ДатаОпороса, Стр.ПериодЛактации, Стр.ДатаОтъема, Стр.ПодсосныйПериод, Стр.ПустыеДни, Стр.ДатаАборта , Стр.ДатаСлучка, Стр.ВозрастПоросят);
	КонецЦикла;  
	ОбновитьСтатусНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяМассаВсегоПриИзменении(Элемент)
	 ТекущиеДанные = Элементы.ТЧОбщая.ТекущиеДанные;
	 ТекущиеДанные.СреднийВес = ТекущиеДанные.МассаВсего / ТекущиеДанные.КоличествоОтъемышей;
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.      
	КоличествоСтрок = ТЧОбщая.Количество();
	Если КоличествоСтрок > 0  Тогда
		Если ТЧОбщая[КоличествоСтрок - 1].ДатаОтъема <> '00010101000000' Тогда
			Запись.НомерОпороса = Запись.НомерОпороса + 1;
		КонецЕсли;      
		Если ТЧОбщая[КоличествоСтрок - 1].ДатаОпороса <> '00010101000000'  И 
				ТЧОбщая[КоличествоСтрок - 1].ДатаОтъема = '00010101000000' И 
				(ТЧОбщая[КоличествоСтрок - 1].Живорожденные >0 ИЛИ ТЧОбщая[КоличествоСтрок - 1].Мертвые > 0)Тогда  
			Отказ = Истина;
			Сообщить("Не внесена дата отъема");
		КонецЕсли;
	Иначе
		Запись.НомерОпороса = Запись.НомерОпороса + 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяНомерЖивотногоХрякПриИзменении(Элемент)
	ТекДанные = Элементы.ТЧОбщая.ТекущиеДанные;
	ТекДанные.НазваниеПородыХряк = _НастройкиКонфигурацииНаСервере.ПолучитьПородуХрякаНаСервере(ТекДанные.НомерЖивотногоХряк);  
	ТекДанные.НазваниеПородыХряк1 = _НастройкиКонфигурацииНаСервере.ПолучитьПородуХрякаНаСервере(ТекДанные.НомерЖивотногоХряк1); 
	ТекДанные.НазваниеПородыХряк2 = _НастройкиКонфигурацииНаСервере.ПолучитьПородуХрякаНаСервере(ТекДанные.НомерЖивотногоХряк2);
    ТекДанные.Статус = ПредопределенноеЗначение("Перечисление.Статус.Супоросные");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СменитьНомерЖивотногоНаСервере(НомерЖивотного, ДатаВвода ,НовыйНомерЖивотного)
	СпрНомерЖивотного = Справочники.НомерЖивотного.НайтиПоКоду(НовыйНомерЖивотного);
	Если СпрНомерЖивотного = Справочники.НомерЖивотного.ПустаяСсылка() Тогда        
		СпрНомерЖивотного = Справочники.НомерЖивотного.СоздатьЭлемент();
		СпрНомерЖивотного.Код 			= НовыйНомерЖивотного;
		СпрНомерЖивотного.Наименование  = НовыйНомерЖивотного;
		СпрНомерЖивотного.Записать();
	КонецЕсли;   
	
	НаборЗаписей 		= РегистрыСведений.ЖурналВыбраковки.СоздатьНаборЗаписей();  
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.ЖурналОпороса.СоздатьНаборЗаписей();
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.ЖурналОсеменения.СоздатьНаборЗаписей(); 
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.ЖурналОтъема.СоздатьНаборЗаписей();  
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.КарточкаВнесенияДанных.СоздатьНаборЗаписей();  
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.Вакцинация.СоздатьНаборЗаписей();   
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.Аборт.СоздатьНаборЗаписей();     
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.Супоросность.СоздатьНаборЗаписей();   
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.ПоследнееСобытие.СоздатьНаборЗаписей();  
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного); 
	
	НаборЗаписей = РегистрыСведений.КлючевыеЦифрыОпороса.СоздатьНаборЗаписей();
	СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного);
	
	
	ЗаписатьИсториюНомерЖивотногоРегистрНаСервере(ДатаВвода, НаборЗаписей, НомерЖивотного, СпрНомерЖивотного);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СменитьНомерЖивотногоРегистрНаСервере(ДатаВвода, Знач НаборЗаписей, НомерЖивотного, Знач СпрНомерЖивотного)
	
	Перем Записи;
	
	НаборЗаписей.Отбор.НомерЖивотного.Установить(НомерЖивотного);
	Попытка
		НаборЗаписей.Отбор.ДатаВвода.Установить(ДатаВвода);
	Исключение
		НаборЗаписей.Отбор.Период.Установить(ДатаВвода);
	КонецПопытки; 
	
	НаборЗаписей.Прочитать();  
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого Записи Из НаборЗаписей Цикл  
			ЗаписьНовая = Неопределено;
			Если ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.ЖурналВыбраковки") Тогда
				ЗаписьНовая  = РегистрыСведений.ЖурналВыбраковки.СоздатьМенеджерЗаписи(); 
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.ЖурналОпороса") Тогда
				ЗаписьНовая  = РегистрыСведений.ЖурналОпороса.СоздатьМенеджерЗаписи();
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.ЖурналОсеменения") Тогда
				ЗаписьНовая  = РегистрыСведений.ЖурналОсеменения.СоздатьМенеджерЗаписи();   
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.ЖурналОтъема") Тогда
				ЗаписьНовая  = РегистрыСведений.ЖурналОтъема.СоздатьМенеджерЗаписи();     
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.КарточкаВнесенияДанных") Тогда
				ЗаписьНовая  = РегистрыСведений.КарточкаВнесенияДанных.СоздатьМенеджерЗаписи();
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.Вакцинация") Тогда
				ЗаписьНовая  = РегистрыСведений.Вакцинация.СоздатьМенеджерЗаписи();       
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.Аборт") Тогда
				ЗаписьНовая  = РегистрыСведений.Аборт.СоздатьМенеджерЗаписи();            
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.Супоросность") Тогда
				ЗаписьНовая  = РегистрыСведений.Супоросность.СоздатьМенеджерЗаписи();     
			ИначеЕсли ТипЗнч(Записи) = Тип("РегистрСведенийЗапись.КлючевыеЦифрыОпороса") Тогда
				ЗаписьНовая  = РегистрыСведений.КлючевыеЦифрыОпороса.СоздатьМенеджерЗаписи(); 
			КонецЕсли;   
			Если ЗаписьНовая <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗаписьНовая,Записи); 
				ЗаписьНовая.НомерЖивотного = СпрНомерЖивотного.Ссылка;
				ЗаписьНовая.Записать();
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура ЗаписатьИсториюНомерЖивотногоРегистрНаСервере(ДатаВвода, Знач НаборЗаписей, НомерЖивотного, Знач СпрНомерЖивотного)
	
	Перем Записи;
	ЗаписьСменыНомераЖивотного = РегистрыСведений.ЖурналСменыНомераЖивотного.СоздатьМенеджерЗаписи(); 
	ЗаписьСменыНомераЖивотного.Период				= ТекущаяДата();
	ЗаписьСменыНомераЖивотного.НомерЖивотногоСтарый = НомерЖивотного;
	ЗаписьСменыНомераЖивотного.НомерЖивотногоНовый  = СпрНомерЖивотного.Ссылка;
	ЗаписьСменыНомераЖивотного.ДатаВвода			= ДатаВвода;
	ЗаписьСменыНомераЖивотного.Записать();
КонецПроцедуры


&НаКлиенте
Процедура СменитьНомерЖивотного(Команда)    
	НовыйНомерЖивотного = "";
	ВвестиСтроку(НовыйНомерЖивотного,"Введите новый номер животного",9);
	Если НовыйНомерЖивотного <> "" Тогда
		СтарыйНомерЖивотного 	= Запись.НомерЖивотного; 
		Запись.НомерЖивотного 	= ПолучитьНомерЖивотногоНаСервере(НовыйНомерЖивотного);
		Записать(); 
		СменитьНомерЖивотногоНаСервере(СтарыйНомерЖивотного,Запись.Период, НовыйНомерЖивотного);   	 
		ПеречитатьДанныеНаКлиенте();	
		ПроверитьДатуВыбытияНаКлиенте();      
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерЖивотногоНаСервере(Знач НовыйНомерЖивотного)  
	
	СпрНомерЖивотного = Справочники.НомерЖивотного.НайтиПоКоду(НовыйНомерЖивотного);
	Если СпрНомерЖивотного = Справочники.НомерЖивотного.ПустаяСсылка() Тогда        
		СпрНомерЖивотного = Справочники.НомерЖивотного.СоздатьЭлемент();
		СпрНомерЖивотного.Код 			= НовыйНомерЖивотного;
		СпрНомерЖивотного.Наименование  = НовыйНомерЖивотного;
		СпрНомерЖивотного.Записать();
	КонецЕсли;   
	
	Возврат СпрНомерЖивотного.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)   
	
	ЗаписьВыбраковкиНаСервере();	
	ПроверитьДатуВыбытияНаКлиенте();

КонецПроцедуры

&НаСервере
Процедура ЗаписьВыбраковкиНаСервере()
	
	Перем Записи, НаборЗаписей;
	
	Если Запись.ДатаВыбытие <> '00010101000000' Тогда 
		НаборЗаписей = РегистрыСведений.ЖурналВыбраковки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
		НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период); 
		НаборЗаписей.Отбор.Период.Установить(Запись.ДатаВыбытие); 
		НаборЗаписей.Прочитать(); 
		Если НаборЗаписей.Количество() = 0 Тогда 
			НаборЗаписей = РегистрыСведений.ЖурналВыбраковки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей,Запись);
			НаборЗаписей.Период 	= Запись.ДатаВыбытие;
			НаборЗаписей.ДатаВвода  = Запись.Период; 
			НаборЗаписей.Пол		= Перечисления.Пол.Свинка;
			НаборЗаписей.КодПричины	= Запись.ПричинаВыбытия;   
			НаборЗаписей.КодПороды	= Запись.КодПороды;
		КонецЕсли;
		
		Попытка  
			НаборЗаписей.Записать(Истина);
		Исключение   
			Сообщить(ОписаниеОшибки()) ;
		КонецПопытки;
		ВыбытиеСатусНаСервере();
		
		
		
		НаборЗаписей = РегистрыСведений.КарточкаВнесенияДанных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
		НаборЗаписей.Отбор.Период.Установить(Запись.Период); 
		НаборЗаписей.Прочитать();
		Для Каждого Записи ИЗ НаборЗаписей Цикл    
			Записи.ДатаВыбытие = Запись.ДатаВыбытие;
			Записи.КодВыбытие  = Запись.ПричинаВыбытия;
		КонецЦикла;  
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение   
			Сообщить(ОписаниеОшибки()) ;
		КонецПопытки;   		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьВыбытиеНаСервере()
	Если Запись.ДатаВыбытие <> '00010101000000' Тогда 
		НаборЗаписей = РегистрыСведений.ЖурналВыбраковки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
		НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период); 
		НаборЗаписей.Отбор.Период.Установить(Запись.ДатаВыбытие); 
		НаборЗаписей.Прочитать(); 
		Если НаборЗаписей.Количество() <> 0 Тогда  
			НаборЗаписей.Очистить(); 
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение   
				Сообщить(ОписаниеОшибки()) ;
			КонецПопытки;
		КонецЕсли;		
		ВыбытиеСатусНаСервере();
		
		
		
		НаборЗаписей = РегистрыСведений.КарточкаВнесенияДанных.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
		НаборЗаписей.Отбор.Период.Установить(Запись.Период); 
		НаборЗаписей.Прочитать();
		Для Каждого Записи ИЗ НаборЗаписей Цикл    
			Записи.ДатаВыбытие = '00010101000000';
			Записи.КодВыбытие  = Справочники.Причины.ПустаяСсылка();
		КонецЦикла;  
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение   
			Сообщить(ОписаниеОшибки()) ;
		КонецПопытки;	
		
		Запись.ДатаВыбытие 		= '00010101000000';
		Запись.ПричинаВыбытия  	= Справочники.Причины.ПустаяСсылка();
		Запись.ТипВыбытие	 	= Перечисления.ТипВыбытие.ПустаяСсылка();
		Запись.МассаВыбытие		= 0;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыбытие(Команда)
	ОтменитьВыбытиеНаСервере();
	ПроверитьДатуВыбытияНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяМассаВсегоОпоросПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТЧОбщая.ТекущиеДанные;
	ТекущиеДанные.СреднийВесОпорос = ТекущиеДанные.МассаВсегоОпорос / ТекущиеДанные.Живорожденные;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусНаСервере()
	НаборЗаписей = РегистрыСведений.ПоследнееСобытие.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаВвода.Установить(Запись.Период);
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
	НаборЗаписей.Прочитать(); 
	Если НаборЗаписей.Количество() <> 0  Тогда 
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;         
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	ОбновитьСтатусНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)   
		ОбновитьСтатусНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяРегистрация(Команда)
	Попытка   
		НомерЖивотного 	= Запись.НомерЖивотного;
		ДатаВвода		= Запись.Период;
		ОткрытьФорму("РегистрСведений.ДополнителнаяРегистрация.Форма.ФормаЗаписи", Новый Структура("НомерЖивотного, ДатаВвода", НомерЖивотного, ДатаВвода),,,,,,);
	Исключение 
		//Сообщить(Строка(Строка.НомерЖивотного)+"_"+ Строка.Период);
	КонецПопытки; 
	ОбновитьИнтерфейс(); 
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТЧПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Заголовок = "Доп. информация" Тогда  
		УстановитьПараметрыСпискаНаСервере();
	ИначеЕсли ТекущаяСтраница.Заголовок = "Медицина" Тогда
		УстановитьПараметрыСпискаНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаНаСервере()
	
	ТЧДопРегистрация.Параметры.УстановитьЗначениеПараметра("ДатаВвода",Запись.Период);
	ТЧДопРегистрация.Параметры.УстановитьЗначениеПараметра("НомерЖивотного",Запись.НомерЖивотного);   
	ТЧМедицина.Параметры.УстановитьЗначениеПараметра("ДатаВвода",Запись.Период);
	ТЧМедицина.Параметры.УстановитьЗначениеПараметра("НомерЖивотного",Запись.НомерЖивотного);
	
КонецПроцедуры

&НаКлиенте
Процедура Медицина(Команда)
	Попытка   
		НомерЖивотного 	= Запись.НомерЖивотного;
		ДатаВвода		= Запись.Период;
		ОткрытьФорму("РегистрСведений.Медицина.Форма.ФормаЗаписи", Новый Структура("НомерЖивотного, ДатаВвода", НомерЖивотного, ДатаВвода),,,,,,);
	Исключение 
		//Сообщить(Строка(Строка.НомерЖивотного)+"_"+ Строка.Период);
	КонецПопытки;
	ОбновитьИнтерфейс();  
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура ТЧОбщаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	СтандартнаяОбработка = Ложь;   
	ТекущиеДанные = Элементы.ТЧОбщая.ТекущиеДанные;
	Если Поле.Имя = "ТЧОбщаяКоличествоОтъемышей" Тогда  
			ПараметрыФормы = Новый Структура("НомерЖивотного, ДатаВвода, Порода, КоличествоПоросят, Отец, Мать, ПородаОтец, ПородаМать, ДатаРождения",
										Запись.НомерЖивотного,Запись.Период,Запись.КодПороды,ТекущиеДанные.КоличествоОтъемышей,ТекущиеДанные.НомерЖивотногоХряк,Запись.НомерЖивотного,
										ТекущиеДанные.НазваниеПородыХряк,Запись.КодПороды,ТекущиеДанные.ДатаОпороса);
			ОткрытьФорму("РегистрСведений.КарточкаСвиноматки.Форма.ФормаНумерации",ПараметрыФормы,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БыстраяПечать(Команда)
	ТабДок = Новый ТабличныйДокумент;
	КарточкаНаСервере(ТабДок);
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Напечатать();
КонецПроцедуры

&НаКлиенте
Процедура КарточкаБезПороды(Команда)
	ТабДок = Новый ТабличныйДокумент;
	КарточкаНаСервереБезПороды(ТабДок);
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать()

КонецПроцедуры

&НаСервере
Процедура КарточкаНаСервереБезПороды(ТабДок)  
	Записать();
	Макет = РегистрыСведений.КарточкаСвиноматки.ПолучитьМакет("КарточкаМельникова");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.НомерЖивотного 	= Запись.НомерЖивотного;
//	ОбластьШапка.Параметры.КодПороды 		= Запись.КодПороды.Код;
//	ОбластьШапка.Параметры.Порода	 		= Запись.КодПороды.Наименование;
	
	
	//дата последнего осеменения + 117 
	
	//Для Каждого Стр из ТЧСлучка Цикл
	//	ДатаПредполагаемогоОпороса = Стр.ДатаСлучка;
	//КонецЦикла;
	//КоличествоДней = 117;
	//ОбластьШапка.Параметры.ДатаПредполагаемогоОпороса = ДатаПредполагаемогоОпороса + КоличествоДней * 60 * 60 * 24;    
	КоличествоСтрок = ТЧОбщая.Количество();	  
	ДатаПредполагаемогоОпороса = '00010101000000';
	Если КоличествоСтрок > 0 Тогда
		ПоследняяСтрока = ТЧОбщая[КоличествоСтрок - 1]; 
		Если ПоследняяСтрока.ДатаАборта = '00010101000000' Тогда
			Если ПоследняяСтрока.ДатаОпороса = '00010101000000'  И ПоследняяСтрока.ДатаСлучка <> '00010101000000' Тогда
				ДатаПредполагаемогоОпороса =  ПоследняяСтрока.ДатаСлучка + _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 *60); 
			Иначе 
				ДатаПредполагаемогоОпороса =  ПоследняяСтрока.ДатаОпороса;
			КонецЕсли;                   
		Иначе
			ДатаПредполагаемогоОпороса = '00010101000000';
		КонецЕсли;
	КонецЕсли;
	ОбластьШапка.Параметры.ДатаПредполагаемогоОпороса = ДатаПредполагаемогоОпороса;  
	МассивДат = ТЧОбщая.Выгрузить(,"ДатаСлучка");
	МассивДат.Сортировать("ДатаСлучка УБЫВ");   
	Если МассивДат.Количество() > 0 Тогда
		//ОбластьШапка.Параметры.Группа = НеделяГода(МассивДат[0].ДатаСлучка) + Константы.КорректировкаНачалаГода.Получить();  
		ОбластьШапка.Параметры.Группа = _НастройкиКонфигурацииНаСервере.РасчетНомераНедели(МассивДат[0].ДатаСлучка,Константы.НачалоОтсчетаНомераНедели.Получить());
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьШапка);
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьСтрокаТаблицы.Параметры.Период = Запись.Период;
	ОбластьСтрокаТаблицы.Параметры.Вес = Запись.МассаВвод; 
	ОбластьСтрокаТаблицы.Параметры.ДатаРождения = Запись.ДатаРождения;
	ОбластьСтрокаТаблицы.Параметры.КодПороды = Запись.КодПороды;
	ОбластьСтрокаТаблицы.Параметры.УшнойВыщип = Запись.УшнойВыщип;
	ОбластьСтрокаТаблицы.Параметры.IDНомер = Запись.IDНомер;	
	ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоМать = Запись.НомерЖивотногоМать;
	ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоОтец = Запись.НомерЖивотногоОтец;
	//ОбластьСтрокаТаблицы.Параметры.Место = ;
	ТабДок.Вывести(ОбластьСтрокаТаблицы);
	
	ОбластьШапкаСобытия = Макет.ПолучитьОбласть("ШапкаСобытия");
	ТабДок.Вывести(ОбластьШапкаСобытия);    
	
	ОбластьСтрокаСобытия = Макет.ПолучитьОбласть("СтрокаСобытия");	 
	ВесОтъемов 			= 0;
	КоличествоОтъемов 	= 0;

	Для Каждого ВыборкаДетальныеЗаписи ИЗ ТЧОбщая Цикл
		ОбластьСтрокаСобытия.Параметры.Номер = ВыборкаДетальныеЗаписи.НомерОпороса;
		ОбластьСтрокаСобытия.Параметры.ДатаСлучка = ВыборкаДетальныеЗаписи.ДатаСлучка;
		ОбластьСтрокаСобытия.Параметры.НомерЖивотногоХряк = ВыборкаДетальныеЗаписи.НомерЖивотногоХряк;
		ОбластьСтрокаСобытия.Параметры.КодРаботника = ВыборкаДетальныеЗаписи.Работник;   
		ОбластьСтрокаСобытия.Параметры.ДатаОпороса = ВыборкаДетальныеЗаписи.ДатаОпороса; 
		Если ВыборкаДетальныеЗаписи.ДатаСлучка <> Дата(1,1,1)Тогда
			ОбластьСтрокаСобытия.Параметры.ПДатаОпороса = ВыборкаДетальныеЗаписи.ДатаСлучка + _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 *60);
		Иначе
			ОбластьСтрокаСобытия.Параметры.ПДатаОпороса = "";	
		КонецЕсли;
		ОбластьСтрокаСобытия.Параметры.Живорожденные = ВыборкаДетальныеЗаписи.Живорожденные;
		ОбластьСтрокаСобытия.Параметры.Мертвые = ВыборкаДетальныеЗаписи.Мертвые;
		ОбластьСтрокаСобытия.Параметры.Слаборожденные = ВыборкаДетальныеЗаписи.Слаборожденные;
		ОбластьСтрокаСобытия.Параметры.Муммии = ВыборкаДетальныеЗаписи.Муммии;
		ОбластьСтрокаСобытия.Параметры.Свинки = ВыборкаДетальныеЗаписи.Свинки;
		ОбластьСтрокаСобытия.Параметры.ДатаОтъема = ВыборкаДетальныеЗаписи.ДатаОтъема;
		ОбластьСтрокаСобытия.Параметры.КоличествоОтъемышей = ВыборкаДетальныеЗаписи.КоличествоОтъемышей;
		ОбластьСтрокаСобытия.Параметры.ПодсосныйПериод = ВыборкаДетальныеЗаписи.ПодсосныйПериод;
		ОбластьСтрокаСобытия.Параметры.ПустыеКормодни = ВыборкаДетальныеЗаписи.ПустыеДни; 
		Если ВыборкаДетальныеЗаписи.СреднийВес > 0 Тогда 
			ВесОтъемов 			= ВесОтъемов + ВыборкаДетальныеЗаписи.СреднийВес;
			КоличествоОтъемов 	= КоличествоОтъемов + 1;
		КонецЕсли;
		ТабДок.Вывести(ОбластьСтрокаСобытия);
	КонецЦикла;  
	
	ОбластьСтрокаТаблицыПустая = Макет.ПолучитьОбласть("СтрокаТаблицыПусто");	
	ТабДок.Вывести(ОбластьСтрокаТаблицыПустая);   
	
	ОбластьШапкаОхота = Макет.ПолучитьОбласть("ШапкаОхота");
	ТабДок.Вывести(ОбластьШапкаОхота);
	
	ОбластьСтрокаОхота = Макет.ПолучитьОбласть("СтрокаОхота"); 
	Номер = 1;
	Для Каждого СтрЗапись ИЗ ТЧЖурналОхот Цикл     
		ОбластьСтрокаОхота.Параметры.Номер     = Номер;
		ОбластьСтрокаОхота.Параметры.ДатаОхота = СтрЗапись.ДатаСобытия; 
		Номер = Номер + 1;   
		ТабДок.Вывести(ОбластьСтрокаОхота);
	КонецЦикла;
	
	ОбластьДляЗаписей = Макет.ПолучитьОбласть("ДляЗаписей");
	ТабДок.Вывести(ОбластьДляЗаписей);     

	
	
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры












