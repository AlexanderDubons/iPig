&НаКлиенте
Процедура ПериодОтбораПриИзменении(Элемент)
	Перем ЭлементыОтбора;

	Список.Отбор.Элементы.Очистить();
	ЭлементыГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементыГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементыГруппаОтбора.Использование = Истина;

	ЭлементыОтбора = ЭлементыГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементыОтбора.Использование 	= Не (ПериодОтбора.ДатаНачала = '00010101000000');
	ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Период");
	ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементыОтбора.ПравоеЗначение   = ПериодОтбора.ДатаНачала;

	ЭлементыОтбора = ЭлементыГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементыОтбора.Использование 	= Не (ПериодОтбора.ДатаОкончания = '00010101000000');
	ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Период");
	ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементыОтбора.ПравоеЗначение   = ПериодОтбора.ДатаОкончания;
	КоличествоЗаписей = СписокВТЗнаСервере();
КонецПроцедуры

&НаСервере
Функция СписокВТЗнаСервере()
	// реквизит1 - динамический список на форме  
	Если Статистика Тогда
		Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип(
			"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		МассивСсылок = ТаблицаРезультат.ВыгрузитьКолонку(0);  // выгружаем ссылки в массив для передачи клиенту
		Возврат "Кол. записей: " + Строка(массивСсылок.Количество());
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Изменение = ВосстановитьЗначениеСервер("ЖурналОсеменений.ФормаСписка", "Изменение");

	Если ЗначениеЗаполнено(Изменение) И Изменение Тогда
		КоличествоЗаписей = СписокВТЗнаСервере();
		ПоместитьВХранилище("ЖурналОсеменений.ФормаСписка", "Изменение", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ХранилищеСистемныхНастроек.Сохранить("ЖурналОсеменений.ФормаСписка", "Изменение", Истина);
КонецПроцедуры
&НаСервереБезКонтекста
Процедура ПоместитьВХранилище(ИмяОбъект, ИмяПараметр, Значение)

	ХранилищеСистемныхНастроек.Сохранить(ИмяОбъект, ИмяПараметр, Значение);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьЗначениеСервер(ИмяОъект, ИмяПараметр)
	; 
	Возврат ХранилищеСистемныхНастроек.Загрузить(ИмяОъект, ИмяПараметр);
КонецФункции

&НаКлиенте
Процедура ПоследниеТриГодаПриИзменении(Элемент)
	ПериодОтбора.ДатаНачала    = '00010101';
	ПериодОтбора.ДатаОкончания = '00010101';
	Если ПоследниеТриГода Тогда
		Все = Ложь;
	Иначе
		Все = Истина;
	КонецЕсли;
	ОтборСписокСвиноматок();
	КоличествоЗаписей = СписокВТЗнаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокСвиноматок()

	Перем ЭлементыОтбора;

	Список.Отбор.Элементы.Очистить();
	ЭлементыГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементыГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементыГруппаОтбора.Использование = Истина;

	ЭлементыОтбора = ЭлементыГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементыОтбора.Использование 	= Не Все;
	ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Период");
	ЭлементыОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементыОтбора.ПравоеЗначение   = ДобавитьМесяц(ТекущаяДата(), (-1) * 12 * 3);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Все = Ложь;
	ПоследниеТриГода = Истина;
	ОтборСписокСвиноматок();

КонецПроцедуры

&НаКлиенте
Процедура ВсеПриИзменении(Элемент)
	ПериодОтбора.ДатаНачала    = '00010101';
	ПериодОтбора.ДатаОкончания = '00010101';
	Если Все Тогда
		ПоследниеТриГода = Ложь;
	Иначе
		ПоследниеТриГода = Истина;
	КонецЕсли;
	ОтборСписокСвиноматок();
	КоличествоЗаписей = СписокВТЗнаСервере();
КонецПроцедуры
&НаКлиенте
Процедура Статистика(Команда)
	Статистика = Не Статистика;
	КоличествоЗаписей = СписокВТЗнаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ГрупповойВводОсеменения(Команда)
	ОткрытьФорму("РегистрСведений.ЖурналОсеменения.Форма.ФормаВводаДанных", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	УдалениеНомерЖивотного 	= Элемент.ТекущиеДанные.НомерЖивотного;
	УдалениеДатаВвода		= Элемент.ТекущиеДанные.ДатаВвода;
	УДалениеДатаСобытия		= Элемент.ТекущиеДанные.Период;
КонецПроцедуры

&НаКлиенте
Процедура СписокПослеУдаления(Элемент)
	_ОбработкаОповещенияНаКлиенте.ОткрытьФормуСвиноматки(УдалениеНомерЖивотного, УдалениеДатаВвода);
	_НастройкиКонфигурацииНаСервере.ЗаписьДанныхРегистраВЖурналРегистрацийПриУдалении(Элемент.ТекущаяСтрока,
		УдалениеНомерЖивотного, УдалениеДатаСобытия, "Удаление");
КонецПроцедуры
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	МенюВыбора = Новый СписокЗначений;
	МенюВыбора.Добавить(0, "Открыть карточку осеменения");
	МенюВыбора.Добавить(1, "Открыть карточку свиноматки");
	ВыбСтрокаМеню = ВыбратьИзМеню(МенюВыбора);
	Попытка
		Если ВыбСтрокаМеню.Значение = 1 Тогда
			СтандартнаяОбработка = Ложь;
			Попытка
				НомерЖивотного 	= Элемент.ТекущиеДанные.НомерЖивотного;
				ДатаВвода		= Элемент.ТекущиеДанные.ДатаВвода;
				ОткрытьФорму("РегистрСведений.КарточкаСвиноматки.Форма.ФормаЗаписи",
					Новый Структура("Ключ, ФормаОткрыта", _НастройкиКонфигурацииНаСервере.ПолучитьКлючЗаписи(
					НомерЖивотного, ДатаВвода), Ложь), , , , , , );
			Исключение 
				//Сообщить(Строка(Строка.НомерЖивотного)+"_"+ Строка.Период);
			КонецПопытки;
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Ложь;
	КонецПопытки;
КонецПроцедуры