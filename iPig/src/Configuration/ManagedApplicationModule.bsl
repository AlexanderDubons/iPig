Процедура ПередНачаломРаботыСистемы(Отказ)
	_НастройкиКонфигурацииНаСервере.ПроверкаПользователей();
	_ОбработкаОповещенияНаКлиенте.РезультатПоискаФайлов(); 
	//_НастройкиКонфигурацииНаСервере.РасчетНомераНедели(Дата(2022,12,31),2);

КонецПроцедуры

Асинх Процедура ПриНачалеРаботыСистемы()    
   //_НастройкиКонфигурацииНаСервере.РасчетНомераНедели(Дата(2024,1,8),1);
	//Отказ = _НастройкиКонфигурацииНаСервере.ПроверитьТекущуюДатуНаСервере(); 
	ПроверкаДанныхОрганизации();
	ОписаниеОповещение = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытия", _ОбработкаОповещенияНаКлиенте);
	//Если Отказ Тогда    
	//	ОткрытьФорму("ОбщаяФорма.ДанныеОрганизации",,,,,,ОписаниеОповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);  
	//КонецЕсли;		
	_НастройкиКонфигурацииНаСервере.СистемныеСообщенияКонфигурации();
	УстановитьЗаголовокКлиентскогоПриложения("iPig "
		+ _НастройкиКонфигурацииНаСервере.ПолучитьВерсиюКонфигурацииНаСервере() + " / "
		+ _НастройкиКонфигурацииНаСервере.ПолучитьНаименованиеОрганизацииНаСервере() + " / Лицензия до " + Формат(
		_НастройкиКонфигурацииНаСервере.ПолучитьДатуЛицензии(), "ДФ=dd.MM.yyyy"));
	ЗапуститьОбработкуНаСервере();
КонецПроцедуры

Процедура ЗапуститьОбработкуНаСервере()
	Если _НастройкиКонфигурацииНаСервере.ПолучитьДанныеОЗапускиОбработкиОбновления() Тогда
		ОткрытьФорму("Обработка.ОбновитьЗаписи.Форма");
	КонецЕсли;
КонецПроцедуры

//
Асинх Процедура ПроверкаДанныхОрганизации()

	Отказ = _НастройкиКонфигурацииНаСервере.ПроверитьТекущуюДатуНаСервере();
	РезультатПроверки = _НастройкиКонфигурацииНаСервере.ПроверкаДанныхОрганизации();
	Если Не РезультатПроверки Или Отказ Тогда
		ЖДАТЬ ПредупреждениеАсинх("Заполните данные организации или лицензионный ключ",,"Данные не заполены");
		Оповещение = Новый ОписаниеОповещения("ОбработкаВнесенияДанных", _ОбработкаОповещенияНаКлиенте);
		ОткрытьФорму("ОбщаяФорма.ДанныеОрганизации", , , , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		Если _НастройкиКонфигурацииНаСервере.ПолучитьОбновлениеБазыНаСервере() Тогда

			_НастройкиКонфигурацииНаСервере.УстановитьДатуОбновленияНаСервере();
			ПолучитьФайлыССервера();

		ИначеЕсли _НастройкиКонфигурацииНаСервере.СделатьКопиюБазыНаСервере() Тогда

			ЖДАТЬ ПредупреждениеАсинх("Будет сделана копия базы, данный процесс может заняит некоторое время",10,"Копия базы");
			ПутьСохранения = _НастройкиКонфигурацииНаСервере.ПолучитьПутьСохраненияНаСервере();
#Если Не ВебКлиент Тогда
			Текст = Новый ЗаписьТекста(ПутьСохранения + "\backup.bat", // имя

				КодировкаТекста.ANSI, // кодировка

				Символы.ПС, // разделитель строк (необ.)

				Ложь // перезаписывать файл, а не дописывать в конец (необ.)
			);
			Текст.ЗаписатьСтроку("echo off");
			Текст.ЗаписатьСтроку("cls");
			Текст.ЗаписатьСтроку("chcp 1251");
			Текст.ЗаписатьСтроку("rem -- Убивам процесс 1С если он такой есть");
			Текст.ЗаписатьСтроку("taskkill /f /im 1cv8c.exe");

			Текст.ЗаписатьСтроку("rem -- удаляем файлы старше 14 шт");
			Текст.ЗаписатьСтроку("dir *.dt /a:-D/b/o:-D > del_list_files.txt");
			Текст.ЗаписатьСтроку("for /F ""skip=3"" %%i in (del_list_files.txt) do (del /Q ""%%i"")");
			Текст.ЗаписатьСтроку("del del_list_files.txt");
			Текст.ЗаписатьСтроку("rem ----------------------------------------------- ");

			Текст.ЗаписатьСтроку("rem -- определяем какая платформа 1С стоит х86 или х64,");
			Текст.ЗаписатьСтроку("rem -- пути у них разные");
			Текст.ЗаписатьСтроку("IF EXIST ""%programfiles%\1cv8\common\1cestart.exe"" (");
			Текст.ЗаписатьСтроку("	set path_1C=""%programfiles%\1cv8\common\1cestart.exe""");
			Текст.ЗаписатьСтроку("	) ELSE (");
			Текст.ЗаписатьСтроку("	set path_1C=""%programfiles(x86)%\1cv8\common\1cestart.exe""");
			Текст.ЗаписатьСтроку("	)");
			Текст.ЗаписатьСтроку("rem -----------------------------------------------");

			Текст.ЗаписатьСтроку("rem -- Данные пользователя");
			Текст.ЗаписатьСтроку("set user_1C=""Пользователь""");
			Текст.ЗаписатьСтроку("set pswd_1C=""""");
			Текст.ЗаписатьСтроку("rem -- Название базы");
			НазваниеФайла = СтрЗаменить(Строка(_НастройкиКонфигурацииНаСервере.ПолучитьУНПНаСервере()) + "_("
				+ СтрЗаменить(_НастройкиКонфигурацииНаСервере.ПолучитьВерсиюКонфигурацииНаСервере(), ".", "") + ")_"
				+ Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + ".dt", " ", "");
			Текст.ЗаписатьСтроку("set name_base=" + НазваниеФайла);
			Текст.ЗаписатьСтроку("rem -- путь базы бэкапа");
			Текст.ЗаписатьСтроку("set name_base_backup=" + ПолучитьПредставлениеИнформационнойБазы());

			Текст.ЗаписатьСтроку("setlocal");

			Текст.ЗаписатьСтроку("rem -- выгрузка базы данных");
			Текст.ЗаписатьСтроку("%path_1C% CONFIG /F%name_base_backup% /N%user_1C% /P%pswd_1C% /DumpIB %name_base%");
			Текст.ЗаписатьСтроку("TIMEOUT /T 60 /NOBREAK ");
			Текст.ЗаписатьСтроку("%path_1C% enterprise /F%name_base_backup% /N%user_1C% /P%pswd_1C%");
			Текст.Закрыть();
			НачатьЗапускПриложения(Новый ОписаниеОповещения("СделатьКопиюЗавершениеЗавершение",
				_ОбработкаОповещенияНаКлиенте, ПутьСохранения + "\" + НазваниеФайла), "backup.bat", ПутьСохранения);
#КонецЕсли
		КонецЕсли
		;
		_НастройкиКонфигурацииНаСервере.ПроверитьКопиюНаСервере();
	КонецЕсли;
КонецПроцедуры // ПроверкаДанныхОрганизации()
Функция ПолучитьПредставлениеИнформационнойБазы()

	СтрокаСоединенияСБД =  СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяИБ = Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 1;
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ФайловаяБД = Истина;
	Иначе
		// надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");

		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;

		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2;

		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования
			- НачальнаяПозицияКопирования + 1);

		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");

		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;

		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2;

		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования
			- НачальнаяПозицияКопирования + 1);

		ПутьКБД = ИмяСервера + "/ " + ИмяИБНаСервере;
		ФайловаяБД = Ложь;
	КонецЕсли;
	Возврат ПутьКБД;
КонецФункции
Асинх Процедура ПолучитьФайлыССервера()
#Если Не ВебКлиент Тогда
//		Сообщение = Новый СообщениеПользователю; 
	Попытка
			// Установить соединение с FTP-сервером.    
		Сервер = "by143.atservers.net";
		FTPСервер = Новый FTPСоединение(Сервер, 21, "alftp", "bku-v5y-fF8-zdK", , , , );
	Исключение
			//// Вывести сообщение об ошибке соединения с сервером.
			//Сообщение.Текст = "Не удалось соединиться с сервером: " + Сервер;
			//Сообщение.Сообщить();
			//Сообщение.Текст = ОписаниеОшибки();
			//Сообщение.Сообщить();
		_НастройкиКонфигурацииНаСервере.УстановитьЗначениеОбновления(1);
		Возврат;
	КонецПопытки;
		// Найти файлы в нужном каталоге по указанной маске.
		//МаскаФайлов = "*.tif";
	МассивФайлов = FTPСервер.НайтиФайлы("/version/*.*");
	Для Каждого Файл Из МассивФайлов Цикл
			// Проверить, что это не каталог.
		Если Файл.ЭтоФайл() Тогда
			ВерсияОбновления =  СтрЗаменить(Файл.ИмяБезРасширения, "_", ".");
			Если ВерсияОбновления <> _НастройкиКонфигурацииНаСервере.ПолучитьВерсиюКонфигурацииНаСервере() Тогда
				МассивФайловОбновления = FTPСервер.НайтиФайлы("/update/*.*");
				Для Каждого ФайлОбновления Из МассивФайловОбновления Цикл
					КаталогВременныхФайлов = Ждать КаталогВременныхФайловАсинх();
					ПутьКФайлуОбновления = КаталогВременныхФайлов + ФайлОбновления.Имя;
					FTPСервер.Получить(ФайлОбновления.ПолноеИмя, ПутьКФайлуОбновления);
				КонецЦикла;
				ДопПараментры = Новый Структура("КаталогВременныхФайлов, ПутьКФайлуОбновления", КаталогВременныхФайлов,
					ПутьКФайлуОбновления);
				ОтвентНавопрос = Неопределено;
				ПоказатьВопрос(Новый ОписаниеОповещения("СделатьКопиюЗавершение", _ОбработкаОповещенияНаКлиенте,
					ДопПараментры), "Будет произведено обновление программы", РежимДиалогаВопрос.ОК);

			КонецЕсли;
				// Копировать файл в локальный каталог.
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	_НастройкиКонфигурацииНаСервере.УстановитьЗначениеОбновления(0);
КонецПроцедуры