&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИмяКолонки = ПолучитьКолонкуСортировки();
	Если Не ЗначениеЗаполнено(ИмяКолонки) Тогда
		ИмяКолонки = "НомерЖивотного";
	КонецЕсли;
	ЗаполнитьОтборПоНеделямНаСервере();
	СписокГрупп.Сортировать(ИмяКолонки + " ВОЗР");

КонецПроцедуры

&НаСервере
Функция ПолучитьКолонкуСортировки()

	Перем ИмяКолонки;

	ИмяКолонки = Константы.КолонкаСортировки.Получить();
	Возврат ИмяКолонки;

КонецФункции

&НаСервере
Процедура ЗаполнитьОтборПоНеделямНаСервере()

	СписокГрупп.Очистить();
	СдвигНедели = Константы.НачалоОтсчетаНомераНедели.Получить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	НастройкаКарточкиГруппы.Название КАК Название,
				   |	НастройкаКарточкиГруппы.Код КАК Код,
				   |	НастройкаКарточкиГруппы.ТипСобытия КАК ТипСобытия,
				   |	НастройкаКарточкиГруппы.Дни КАК Дни
				   |ИЗ
				   |	РегистрСведений.НастройкаКарточкиГруппы КАК НастройкаКарточкиГруппы
				   |ГДЕ
				   |	НастройкаКарточкиГруппы.ПоказатьВКарте = ИСТИНА
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Дни";
	РезультатЗапросаКолонка.Загрузить(Запрос.Выполнить().Выгрузить());
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ЗаписьПоследнегоСобытия.ДатаПоследнегоСобытия КАК ДатаСобытия
				   |ИЗ
				   |	РегистрСведений.ПоследнееСобытие КАК ЗаписьПоследнегоСобытия
				   |ГДЕ
				   |	ЗаписьПоследнегоСобытия.ПоследнееСобытие = ЗНАЧЕНИЕ(Перечисление.ПоследнееСобытие.Случка)";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		НоваяСтрока = СписокДат.Добавить();
		НоваяСтрока.ДатаСобытия 	= РезультатЗапроса.ДатаСобытия;
		НоваяСтрока.НомерНедели 	= _НастройкиКонфигурацииНаСервере.РасчетНомераНедели(РезультатЗапроса.ДатаСобытия,
			СдвигНедели);    
		//-------------Корректировка определяемой даты------------------   
		КорректировкаНедели = _НастройкиКонфигурацииНаСервере.КорректировкаНедели(СдвигНедели);
		ДатаКорректировки = РезультатЗапроса.ДатаСобытия + КорректировкаНедели * 24 * 60 * 60;
		//--------------------------------------------------------------		
		НоваяСтрока.НачалоНедели 	= _НастройкиКонфигурацииНаСервере.ДатаПоНомеруНедели(Формат(ДатаКорректировки,
			"ДФ=гггг") + "-W" + Строка(НоваяСтрока.НомерНедели), СдвигНедели);
		НоваяСтрока.КонецНедели		= НоваяСтрока.НачалоНедели + 6 * 24 * 60 * 60;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗаписьПоследнегоСобытия.ДатаПоследнегоСобытия КАК НомерНедели,
				   |	ЗаписьПоследнегоСобытия.НомерЖивотного КАК НомерЖивотного,
				   |	ЗаписьПоследнегоСобытия.УшнойВыщип КАК УшнойВыщип,
				   |	ЗаписьПоследнегоСобытия.НомерЖивотногоХряк КАК НомерЖивотногоХряк,
				   |	ЗаписьПоследнегоСобытия.ПоследнееСобытие КАК ПоследнееСобытие,
				   |	ЗаписьПоследнегоСобытия.ДатаПоследнегоСобытия КАК ДатаСлучки,
				   |	ДОБАВИТЬКДАТЕ(ЗаписьПоследнегоСобытия.ДатаПоследнегоСобытия, ДЕНЬ, ПериодСупоросностиСвиноматки.Значение) КАК ДатаОпороса,
				   |	ЗаписьПоследнегоСобытия.НомерОпороса КАК НомерОпороса,
				   |	ЖурналОсеменения.Работник КАК Работник,
				   |	ЗаписьПоследнегоСобытия.ДатаВвода КАК ДатаВвода,
				   |	ЖурналОсеменения.КодПороды КАК КодПороды
				   |ПОМЕСТИТЬ ВТДанные
				   |ИЗ
				   |	РегистрСведений.ПоследнееСобытие КАК ЗаписьПоследнегоСобытия
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОсеменения КАК ЖурналОсеменения
				   |		ПО ЗаписьПоследнегоСобытия.НомерЖивотного = ЖурналОсеменения.НомерЖивотного
				   |			И ЗаписьПоследнегоСобытия.ДатаВвода = ЖурналОсеменения.ДатаВвода
				   |			И ЗаписьПоследнегоСобытия.ДатаПоследнегоСобытия = ЖурналОсеменения.Период,
				   |	Константа.КорректировкаНачалаГода КАК КорректировкаНачалаГода,
				   |	Константа.ПериодСупоросностиСвиноматки КАК ПериодСупоросностиСвиноматки
				   |ГДЕ
				   |	ЗаписьПоследнегоСобытия.ПоследнееСобытие = ЗНАЧЕНИЕ(Перечисление.ПоследнееСобытие.Случка)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВТДанные.НомерНедели КАК НомерНедели,
				   |	ВТДанные.НомерЖивотного КАК НомерЖивотного,
				   |	ВТДанные.УшнойВыщип КАК УшнойВыщип,
				   |	ВТДанные.НомерЖивотногоХряк КАК НомерЖивотногоХряк,
				   |	ВТДанные.ПоследнееСобытие КАК ПоследнееСобытие,
				   |	ВТДанные.ДатаСлучки КАК ДатаСлучки,
				   |	ВТДанные.ДатаОпороса КАК ДатаОпороса,
				   |	ВТДанные.НомерОпороса КАК НомерОпороса,
				   |	ВТДанные.Работник КАК Работник,
				   |	ВТДанные.НомерЖивотного.Ссылка КАК НомерЖивотногоСсылка,
				   |	ВТДанные.ДатаВвода КАК ДатаВвода,
				   |	ВТДанные.КодПороды КАК КодПороды
				   |ИЗ
				   |	ВТДанные КАК ВТДанные
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерНедели";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из РезультатЗапроса Цикл
		НоваяСтрока = СписокГрупп.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		РезультатПоиска = СписокДат.НайтиСтроки(Новый Структура("ДатаСобытия", Стр.НомерНедели));
		Если РезультатПоиска.Количество() > 0 Тогда
			НоваяСтрока.НомерНедели 	= РезультатПоиска[0].НомерНедели;
			НоваяСтрока.НачалоНедели 	= РезультатПоиска[0].НачалоНедели;
			НоваяСтрока.КонецНедели		= РезультатПоиска[0].КонецНедели;
		КонецЕсли;
		Для Каждого СтрКолонка Из РезультатЗапросаКолонка Цикл
			Если СтрКолонка.ТипСобытия = Перечисления.ТипСобытия.Случка Тогда
				НоваяСтрока[СтрЗаменить(УбратьЛишниеСимволы(СтрКолонка.Название), " ", "_") + Строка(
					СтрКолонка.Код)] =  Стр.ДатаСлучки + СтрКолонка.Дни * 24 * 60 * 60;
			ИначеЕсли СтрКолонка.ТипСобытия = Перечисления.ТипСобытия.Опорос Тогда
				НоваяСтрока[СтрЗаменить(УбратьЛишниеСимволы(СтрКолонка.Название), " ", "_") + Строка(
					СтрКолонка.Код)] =  Стр.ДатаОпороса - СтрКолонка.Дни * 24 * 60 * 60;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 	
	
	
	//ТаблицаРезультат = ПолучитьТЗИзСписка();
	ТаблицаРезультат =  СписокДат.Выгрузить();

	ТаблицаРезультат.Свернуть("НомерНедели, НачалоНедели, КонецНедели");
	ТаблицаРезультат.Сортировать("НомерНедели ВОЗР");
	Для Каждого СтрТР Из ТаблицаРезультат Цикл
		Элементы.ГруппаОсеменения.СписокВыбора.Добавить(СтрТР.НомерНедели, Строка(СтрТР.НомерНедели) + " (" + Формат(
			СтрТР.НачалоНедели, "ДФ=dd.MM.yy") + "-" + Формат(СтрТР.КонецНедели, "ДФ=dd.MM.yy") + ")");
	КонецЦикла;
	СписокГрупп.Сортировать("ДатаСлучки");
	КоличествоЗаписей = СписокГрупп.Количество();
КонецПроцедуры

&НаСервере
Функция ПолучитьТЗИзСписка()

	Перем КомпоновщикМакета, МакетКомпоновки, Настройки, ПроцессорВывода, ПроцессорКомпоновки, Схема, ТаблицаРезультат;

	Схема = Элементы.СписокГрупп.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокГрупп.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип(
		"ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат ТаблицаРезультат;

КонецФункции

&НаСервере
Функция ПолучитьКоличествоЗаписейНаСервере(ВыбранноеЗначение)

	ТЗГруппы = СписокГрупп.НайтиСтроки(Новый Структура("НомерНедели", ВыбранноеЗначение));
	Возврат ТЗГруппы.Количество();

КонецФункции

&НаКлиенте
Процедура ГруппаОсемененияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)       
	
	//СписокГрупп.Отбор.Элементы.Очистить();
	//ЭлементыОтбора = СписокГрупп.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементыОтбора.Использование 	= Истина;
	//ЭлементыОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("НомерНедели");
	//ЭлементыОтбора.ВидСравнения  	= ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементыОтбора.ПравоеЗначение 	= ВыбранноеЗначение;   
	//
	Элементы.СписокГрупп.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерНедели", ВыбранноеЗначение);
	СписокГрупп.Сортировать("НомерЖивотного ВОЗР");

	КоличествоЗаписей = ПолучитьКоличествоЗаписейНаСервере(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаОсемененияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОсемененияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры
&НаКлиенте
Процедура ОчиститьОтбор(Команда)
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКарточку(Команда)
	ТабДок = Новый ТабличныйДокумент;
	ПечатьКарточкуНаСервере(ТабДок);
	ТабДок.ОтображатьСетку 		= Ложь;
	ТабДок.Защита 				= Ложь;
	ТабДок.ТолькоПросмотр 		= Ложь;
	ТабДок.ОтображатьЗаголовки 	= Ложь;
	Если Элементы.СписокГрупп.ПодчиненныеЭлементы.Количество() <= 11 Тогда
		ТабДок.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	Иначе
		ТабДок.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	ТабДок.АвтоМасштаб			= Истина;
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Процедура ПечатьКарточкуНаСервере(ТабДок)
	Макет = Обработки.КарточкаГруппы.ПолучитьМакет("КарточкаГруппыНов");

	ТЗГруппы = СписокГрупп.НайтиСтроки(Новый Структура("НомерНедели", ГруппаОсеменения));
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ГруппаОсеменения = Элементы.ГруппаОсеменения.СписокВыбора.НайтиПоЗначению(
		ГруппаОсеменения);
	ОбластьЗаголовок.Параметры.Животных			= КоличествоЗаписей;
	ТабДок.Вывести(ОбластьЗаголовок);

	ОбластьШапкаНачало 	= Макет.ПолучитьОбласть("Шапка|Начало");
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка|Столбец");
	ОбластьСтрокаНачало = Макет.ПолучитьОбласть("Строка|Начало");
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка|Столбец");
	ТабДок.Вывести(ОбластьШапкаНачало);
	РеквизитыТаблицы = Элементы.СписокГрупп.ПодчиненныеЭлементы;
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		ОбластьШапка.Параметры.Наименование = Реквизит.Заголовок;
		ТабДок.Присоединить(ОбластьШапка);
	КонецЦикла;
	                             	
	//ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	//
	//ЗаписиСписка = ПолучитьТЗИзСписка(); 
	////	ЗаписиСписка.Сортировать("ДатаСлучки");
	Для Каждого СтрЗаписи Из ТЗГруппы Цикл
		ТабДок.Вывести(ОбластьСтрокаНачало);
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			ОбластьСтрока.Параметры.Данные = СтрЗаписи[СтрЗаменить(Реквизит.Имя, "СписокГрупп", "")];
			ТабДок.Присоединить(ОбластьСтрока);
		КонецЦикла;
		//ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СтрЗаписи); 
		//ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокГруппНомерЖивотногоНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПечатьКарточкиСвиноматкиНаСервере(ТабДок)
	ТЗГруппы = СписокГрупп.НайтиСтроки(Новый Структура("НомерНедели", ГруппаОсеменения));
	Для Каждого Запись Из ТЗГруппы Цикл
		РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеОпоросНаСервере(Запись.НомерЖивотного, Запись.ДатаВвода,
			ТЧОпоросы);
		РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеСлучкаНаСервере(Запись.НомерЖивотного, Запись.ДатаВвода,
			ТЧСлучка);
		РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеСупоросностьНаСервере(Запись.НомерЖивотного, Запись.ДатаВвода,
			ТЧСупоросность, Запись.НомерОпороса);
		РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеАбортаНаСервере(Запись.НомерЖивотного, Запись.ДатаВвода,
			ТЧАборт, Запись.НомерОпороса);
		РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеПодсосныеПоросятаНаСервере(Запись.НомерЖивотного,
			Запись.ДатаВвода, ТЧПодсосныеПоросята);
		РегистрыСведений.КарточкаСвиноматки.ПолучитьДанныеОтъемаНаСервере(Запись.НомерЖивотного, Запись.ДатаВвода,
			ТЧОтъем);
		РегистрыСведений.КарточкаСвиноматки.ПолучитьКоличествоОпоросовНаСервере(Запись.НомерЖивотного, Запись.ДатаВвода,
			Запись.НомерОпороса);
		ЗаполнитьОбщуюТаблицуНаСервере(Запись);
		КарточкаНаСервере(ТабДок, Запись);

	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКарточкиСвиноматки(Команда)
	ТабДок = Новый ТабличныйДокумент;
	ПечатьКарточкиСвиноматкиНаСервере(ТабДок);
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Процедура КарточкаНаСервере(ТабДок, Запись)
	НаборЗаписей = РегистрыСведений.КарточкаСвиноматки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЖивотного.Установить(Запись.НомерЖивотного);
	НаборЗаписей.Отбор.Период.Установить(Запись.ДатаВвода);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 1 Тогда
		ДанныеСвиноматки = НаборЗаписей[0];
		Макет = РегистрыСведений.КарточкаСвиноматки.ПолучитьМакет("Карточка");

		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.НомерЖивотного 	= Запись.НомерЖивотного;
		ОбластьШапка.Параметры.КодПороды 		= ДанныеСвиноматки.КодПороды.Код;
		ОбластьШапка.Параметры.Порода	 		= ДанныеСвиноматки.КодПороды.Наименование;
		
		
		//дата последнего осеменения + 117 
		
		//Для Каждого Стр из ТЧСлучка Цикл
		//	ДатаПредполагаемогоОпороса = Стр.ДатаСлучка;
		//КонецЦикла;
		//КоличествоДней = 117;
		//ОбластьШапка.Параметры.ДатаПредполагаемогоОпороса = ДатаПредполагаемогоОпороса + КоличествоДней * 60 * 60 * 24;    
		КоличествоСтрок = ТЧОбщая.Количество();
		ДатаПредполагаемогоОпороса = '00010101000000';
		Если КоличествоСтрок > 0 Тогда
			ПоследняяСтрока = ТЧОбщая[КоличествоСтрок - 1];
			Если ПоследняяСтрока.ДатаАборта = '00010101000000' Тогда
				Если ПоследняяСтрока.ДатаОпороса = '00010101000000' И ПоследняяСтрока.ДатаСлучка <> '00010101000000' Тогда
					ДатаПредполагаемогоОпороса =  ПоследняяСтрока.ДатаСлучка
						+ _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 * 60);
				Иначе
					ДатаПредполагаемогоОпороса =  ПоследняяСтрока.ДатаОпороса;
				КонецЕсли;
			Иначе
				ДатаПредполагаемогоОпороса = '00010101000000';
			КонецЕсли;
		КонецЕсли;
		ОбластьШапка.Параметры.ДатаПредполагаемогоОпороса = ДатаПредполагаемогоОпороса;
		МассивДат = ТЧОбщая.Выгрузить( , "ДатаСлучка");
		МассивДат.Сортировать("ДатаСлучка УБЫВ");
		//ОбластьШапка.Параметры.Группа = НеделяГода(МассивДат[0].ДатаСлучка) + Константы.КорректировкаНачалаГода.Получить();
		ОбластьШапка.Параметры.Группа = _НастройкиКонфигурацииНаСервере.РасчетНомераНедели(МассивДат[0].ДатаСлучка,
			Константы.НачалоОтсчетаНомераНедели.Получить());
		ТабДок.Вывести(ОбластьШапка);

		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДок.Вывести(ОбластьШапкаТаблицы);

		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьСтрокаТаблицы.Параметры.Период = Запись.ДатаВвода;
		ОбластьСтрокаТаблицы.Параметры.Вес = ДанныеСвиноматки.МассаВвод;
		ОбластьСтрокаТаблицы.Параметры.ДатаРождения = ДанныеСвиноматки.ДатаРождения;
		ОбластьСтрокаТаблицы.Параметры.КодПороды = ДанныеСвиноматки.КодПороды;
		ОбластьСтрокаТаблицы.Параметры.УшнойВыщип = ДанныеСвиноматки.УшнойВыщип;
		ОбластьСтрокаТаблицы.Параметры.IDНомер = ДанныеСвиноматки.IDНомер;
		ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоМать = ДанныеСвиноматки.НомерЖивотногоМать;
		ОбластьСтрокаТаблицы.Параметры.НомерЖивотногоОтец = ДанныеСвиноматки.НомерЖивотногоОтец;
		//ОбластьСтрокаТаблицы.Параметры.Место = ;
		ТабДок.Вывести(ОбластьСтрокаТаблицы);

		ОбластьШапкаСобытия = Макет.ПолучитьОбласть("ШапкаСобытия");
		ТабДок.Вывести(ОбластьШапкаСобытия);

		ОбластьСтрокаСобытия = Макет.ПолучитьОбласть("СтрокаСобытия");
		ВесОтъемов 			= 0;
		КоличествоОтъемов 	= 0;

		Для Каждого ВыборкаДетальныеЗаписи Из ТЧОбщая Цикл
			ОбластьСтрокаСобытия.Параметры.Номер = ВыборкаДетальныеЗаписи.НомерОпороса;
			ОбластьСтрокаСобытия.Параметры.ДатаСлучка = ВыборкаДетальныеЗаписи.ДатаСлучка;
			ОбластьСтрокаСобытия.Параметры.НомерЖивотногоХряк = ВыборкаДетальныеЗаписи.НомерЖивотногоХряк;
			ОбластьСтрокаСобытия.Параметры.КодРаботника = ВыборкаДетальныеЗаписи.Работник;
			ОбластьСтрокаСобытия.Параметры.ДатаОпороса = ВыборкаДетальныеЗаписи.ДатаОпороса;
			ОбластьСтрокаСобытия.Параметры.Живорожденные = ВыборкаДетальныеЗаписи.Живорожденные;
			ОбластьСтрокаСобытия.Параметры.Мертвые = ВыборкаДетальныеЗаписи.Мертвые;
			ОбластьСтрокаСобытия.Параметры.Слаборожденные = ВыборкаДетальныеЗаписи.Слаборожденные;
			ОбластьСтрокаСобытия.Параметры.Муммии = ВыборкаДетальныеЗаписи.Муммии;
			ОбластьСтрокаСобытия.Параметры.Свинки = ВыборкаДетальныеЗаписи.Свинки;
			ОбластьСтрокаСобытия.Параметры.ДатаОтъема = ВыборкаДетальныеЗаписи.ДатаОтъема;
			ОбластьСтрокаСобытия.Параметры.КоличествоОтъемышей = ВыборкаДетальныеЗаписи.КоличествоОтъемышей;
			ОбластьСтрокаСобытия.Параметры.ПодсосныйПериод = ВыборкаДетальныеЗаписи.ПодсосныйПериод;
			ОбластьСтрокаСобытия.Параметры.ПустыеКормодни = ВыборкаДетальныеЗаписи.ПустыеДни;
			Если ВыборкаДетальныеЗаписи.СреднийВес > 0 Тогда
				ВесОтъемов 			= ВесОтъемов + ВыборкаДетальныеЗаписи.СреднийВес;
				КоличествоОтъемов 	= КоличествоОтъемов + 1;
			КонецЕсли;
			ТабДок.Вывести(ОбластьСтрокаСобытия);
		КонецЦикла;

		ОбластьСтрокаТаблицыПустая = Макет.ПолучитьОбласть("СтрокаТаблицыПусто");
		ТабДок.Вывести(ОбластьСтрокаТаблицыПустая);   
		
		//ОбластьШапкаОхота = Макет.ПолучитьОбласть("ШапкаОхота");
		//ТабДок.Вывести(ОбластьШапкаОхота);
		
		//ОбластьСтрокаОхота = Макет.ПолучитьОбласть("СтрокаОхота"); 
		//Номер = 1;
		//Для Каждого СтрЗапись ИЗ ТЧЖурналОхот Цикл     
		//	ОбластьСтрокаОхота.Параметры.Номер     = Номер;
		//	ОбластьСтрокаОхота.Параметры.ДатаОхота = СтрЗапись.ДатаСобытия; 
		//	Номер = Номер + 1;   
		//	ТабДок.Вывести(ОбластьСтрокаОхота);
		//КонецЦикла;
		//
		ОбластьДляЗаписей = Макет.ПолучитьОбласть("ДляЗаписей");
		ТабДок.Вывести(ОбластьДляЗаписей);
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбщуюТаблицуНаСервере(Запись)

	РегистрыСведений.КарточкаСвиноматки.ЗаполнитьОбщуюТаблицу(Запись, ТЧОбщая, ТЧСлучка, ТЧСупоросность, ТЧАборт,
		ТЧОпоросы, ТЧОтъем, ТЧБрак, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбщуюТаблицу(Запись, ТЧОбщая)
	ТЧОбщая.Очистить();
	Для Каждого Стр Из ТЧСлучка Цикл
		НоваяСтрока = ТЧОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	КонецЦикла;
	Для Каждого Стр Из ТЧСупоросность Цикл
		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса", Стр.НомерОпороса));
		СтрокаТаблицы = Неопределено;
		Для Каждого СтрМассив Из РезультатПоиска Цикл
			Если СтрокаТаблицы = Неопределено И Стр.ДатаУЗИ >= СтрМассив.ДатаСлучка Тогда
				СтрокаТаблицы = СтрМассив;
			ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаСлучка > СтрокаТаблицы.ДатаСлучка И Стр.ДатаУЗИ
				>= СтрМассив.ДатаСлучка Тогда
				СтрокаТаблицы = СтрМассив;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из ТЧАборт Цикл
		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса", Стр.НомерОпороса));
		СтрокаТаблицы = Неопределено;
		Для Каждого СтрМассив Из РезультатПоиска Цикл
			Если СтрокаТаблицы = Неопределено И Стр.ДатаАборта > СтрМассив.ДатаСлучка Тогда
				СтрокаТаблицы = СтрМассив;
			ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаСлучка > СтрокаТаблицы.ДатаСлучка И Стр.ДатаАборта
				> СтрМассив.ДатаСлучка Тогда
				СтрокаТаблицы = СтрМассив;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Стр);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Стр Из ТЧОпоросы Цикл
		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса", Стр.НомерОпороса));
		СтрокаТаблицы = Неопределено;
		Для Каждого СтрМассив Из РезультатПоиска Цикл
			Если СтрокаТаблицы = Неопределено И Стр.ДатаОпороса > СтрМассив.ДатаСлучка Тогда
				СтрокаТаблицы = СтрМассив;
			ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаСлучка > СтрокаТаблицы.ДатаСлучка И Стр.ДатаОпороса
				> СтрМассив.ДатаСлучка Тогда
				СтрокаТаблицы = СтрМассив;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Стр);
			СтрокаТаблицы.МассаВсего 		= 0;
			СтрокаТаблицы.СреднийВес		= 0;
			СтрокаТаблицы.МассаВсегоОпорос 	= Стр.МассаВсего;
			СтрокаТаблицы.СреднийВесОпорос	= Стр.СреднийВес;
		КонецЕсли;
	КонецЦикла;
	Мачеха = Ложь;
	Для Каждого Стр Из ТЧОтъем Цикл
		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса", Стр.НомерОпороса));
		СтрокаТаблицы = Неопределено;

		Если Не Мачеха Тогда
			Для Каждого СтрМассив Из РезультатПоиска Цикл
				Если СтрокаТаблицы = Неопределено И (Стр.ДатаОтъема >= СтрМассив.ДатаОпороса) Тогда
					СтрокаТаблицы = СтрМассив;
				ИначеЕсли (Стр.ДатаОтъема < СтрМассив.ДатаОпороса) Тогда
					Сообщить("Дата опороса (" + СтрМассив.ДатаОпороса + ") больше даты отъема(" + Стр.ДатаОтъема + ") "
						+ Запись.НомерЖивотного);
					СтрокаТаблицы = СтрМассив;
				ИначеЕсли СтрокаТаблицы <> Неопределено И СтрМассив.ДатаОпороса > СтрокаТаблицы.ДатаОпороса
					И Стр.ДатаОтъема >= СтрМассив.ДатаОпороса Тогда
					СтрокаТаблицы = СтрМассив;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаТаблицы <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Стр);
			КонецЕсли;
		Иначе
			НоваяСтрока = ТЧОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЕсли;
		Мачеха = Стр.Мачеха;
	КонецЦикла;
	ТЧОбщая.Сортировать("НомерОпороса ВОЗР");
	ПредыдущаяСтрока = Неопределено;
	ВсегоПотеряноКормодней = 0;
	ПредыдущаяДатаОтъема =0;
	Для Каждого Стр Из ТЧОбщая Цикл
		РезультатПоиска = ТЧОбщая.НайтиСтроки(Новый Структура("НомерОпороса", Стр.НомерОпороса));
		Если Стр.ДатаОпороса <> Дата(1, 1, 1) Тогда
			Стр.ПериодЛактации = (НачалоДня(Стр.ДатаОпороса) - НачалоДня(Стр.ДатаСлучка)) / (24 * 60 * 60);
		КонецЕсли;
		Если Стр.ДатаОтъема <> Дата(1, 1, 1) Тогда
			Если Стр.ДатаОпороса = Дата(1, 1, 1) Тогда
				Если ПредыдущаяДатаОтъема <> 0 Тогда
					Стр.ПодсосныйПериод = (НачалоДня(Стр.ДатаОтъема) - НачалоДня(ПредыдущаяДатаОтъема)) / (24 * 60 * 60);
				КонецЕсли;
			Иначе
				Стр.ПодсосныйПериод = (НачалоДня(Стр.ДатаОтъема) - НачалоДня(Стр.ДатаОпороса)) / (24 * 60 * 60);
			КонецЕсли;
			ПредыдущаяДатаОтъема = Стр.ДатаОтъема;
		КонецЕсли;
		Если ПредыдущаяСтрока <> Неопределено Тогда
			Если Стр.ДатаСлучка <> Дата(1, 1, 1) Тогда
				Если ПредыдущаяСтрока.ДатаОтъема = Дата(1, 1, 1) Тогда
					ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Стр.ДатаСлучка) - НачалоДня(ПредыдущаяСтрока.ДатаСлучка))
						/ (24 * 60 * 60);
				Иначе
					ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Стр.ДатаСлучка) - НачалоДня(ПредыдущаяСтрока.ДатаОтъема))
						/ (24 * 60 * 60);
				КонецЕсли;
			КонецЕсли;
			ВсегоПотеряноКормодней = ВсегоПотеряноКормодней + ПредыдущаяСтрока.ПустыеДни;
			ПредыдущаяСтрока.ВсегоПотеряноКормодней = ВсегоПотеряноКормодней;
		КонецЕсли;
		ПредыдущаяСтрока = Стр;
	КонецЦикла;
	Если Запись.ДатаВыбытие <> Дата(1, 1, 1) И ПредыдущаяСтрока <> Неопределено Тогда
		Если ПредыдущаяСтрока.ДатаОтъема = Дата(1, 1, 1) Тогда
			ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Запись.ДатаВыбытие) - НачалоДня(ПредыдущаяСтрока.ДатаСлучка)) / (24
				* 60 * 60);
		Иначе
			ПредыдущаяСтрока.ПустыеДни = (НачалоДня(Запись.ДатаВыбытие) - НачалоДня(ПредыдущаяСтрока.ДатаОтъема)) / (24
				* 60 * 60);
		КонецЕсли;
	КонецЕсли;

	КоличествоСтрок = ТЧОбщая.Количество();
	Если КоличествоСтрок > 0 Тогда
		ПоследняяСтрока = ТЧОбщая[КоличествоСтрок - 1];
		Если ПоследняяСтрока.ДатаАборта = '00010101000000' Тогда
			Если ПоследняяСтрока.ДатаОпороса = '00010101000000' И ПоследняяСтрока.ДатаСлучка <> '00010101000000' Тогда
				ПоследняяСтрока.ДатаОпороса = ПоследняяСтрока.ДатаСлучка
					+ _НастройкиКонфигурацииНаСервере.ПолучитьДниСупоросностиНаСервере() * (24 * 60 * 60);
			КонецЕсли;
		Иначе
			ПоследняяСтрока.ДатаОпороса = '00010101000000';
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбщиеНастройкиНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНастройки(Команда)
	ОписаниеОповещение = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытия", ЭтаФорма);
	ОткрытьФорму("РегистрСведений.НастройкаКарточкиГруппы.Форма.ФормаНастроек", , ЭтотОбъект, , , , ОписаниеОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	СписокГрупп.Очистить();
	ЗаполнитьТаблицуКолонками();
	ЗаполнитьОтборПоНеделямНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьТаблицуКолонками();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКолонками()

	Перем Запрос, ОписаниеТипаДата, РезультатЗапроса;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	НастройкаКарточкиГруппы.Название КАК Название,
				   |	НастройкаКарточкиГруппы.ТипСобытия КАК ТипСобытия,
				   |	НастройкаКарточкиГруппы.Дни КАК Дни,
				   |	НастройкаКарточкиГруппы.Код КАК Код
				   |ИЗ
				   |	РегистрСведений.НастройкаКарточкиГруппы КАК НастройкаКарточкиГруппы
				   |ГДЕ
				   |	НастройкаКарточкиГруппы.ПоказатьВКарте = Ложь";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить("СписокГрупп." + СтрЗаменить(УбратьЛишниеСимволы(РезультатЗапроса.Название), " ",
			"_") + Строка(РезультатЗапроса.Код));
		Попытка
			ИзменитьРеквизиты( , УдаляемыеРеквизиты);
		Исключение
		КонецПопытки;
	КонецЦикла;
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	НастройкаКарточкиГруппы.Название КАК Название,
				   |	НастройкаКарточкиГруппы.ТипСобытия КАК ТипСобытия,
				   |	ВЫБОР
				   |		КОГДА НастройкаКарточкиГруппы.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипСобытия.Опорос)
				   |			ТОГДА 400 - НастройкаКарточкиГруппы.Дни
				   |		ИНАЧЕ НастройкаКарточкиГруппы.Дни
				   |	КОНЕЦ КАК Дни,
				   |	НастройкаКарточкиГруппы.Код КАК Код,
				   |	АВТОНОМЕРЗАПИСИ() КАК Порядок
				   |ПОМЕСТИТЬ ВтДанные
				   |ИЗ
				   |	РегистрСведений.НастройкаКарточкиГруппы КАК НастройкаКарточкиГруппы
				   |ГДЕ
				   |	НастройкаКарточкиГруппы.ПоказатьВКарте = ИСТИНА
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВтДанные.Название КАК Название,
				   |	ВтДанные.ТипСобытия КАК ТипСобытия,
				   |	ВтДанные.Дни КАК Дни,
				   |	ВтДанные.Код КАК Код,
				   |	ВтДанные.Порядок КАК Порядок
				   |ИЗ
				   |	ВтДанные КАК ВтДанные
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Дни";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		СоздатьКолонкуНаСервере(СтрЗаменить(УбратьЛишниеСимволы(РезультатЗапроса.Название), " ", "_") + Строка(
			РезультатЗапроса.Код), РезультатЗапроса.Название, ОписаниеТипаДата, "СписокГрупп", Элементы.СписокГрупп);
	КонецЦикла;
КонецПроцедуры
&НаСервере
Процедура СоздатьКолонкуНаСервере(НаименованиеКолонки, Заголовок, ТипЭлемента, ТЧ, ТЧЭлементы)

	Перем нРеквизиты, нЭлемент;
	Попытка
		нРеквизиты = Новый Массив;
		нРеквизиты.Добавить(Новый РеквизитФормы(НаименованиеКолонки, ТипЭлемента, ТЧ, Заголовок, Истина));
		ИзменитьРеквизиты(нРеквизиты);
		нЭлемент 							= Элементы.Добавить(НаименованиеКолонки, Тип("ПолеФормы"), ТЧЭлементы);
		нЭлемент.Вид 						= ВидПоляФормы.ПолеВвода;
		нЭлемент.Видимость					= Истина;
		нЭлемент.Заголовок					= Заголовок;
		нЭлемент.ГоризонтальноеПоложение	= ГоризонтальноеПоложениеЭлемента.Право;
		нЭлемент.ПутьКДанным 				= ТЧ + "." + НаименованиеКолонки;  
		//	нЭлемент.УстановитьДействие("ПриИзменении", "ОбработчикПриИзменении");
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"), УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция УбратьЛишниеСимволы(Строка1) Экспорт
	НовСтрока = "";
	ПравильныеСимволы = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnmЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮйцукенгшщзхъфывапролджэячсмитьбю1234567890";
	Для Сч = 1 По СтрДлина(Строка1) Цикл
		ТекСимв = Сред(Строка1, Сч, 1);
		Если Найти(ПравильныеСимволы, ТекСимв) > 0 Тогда
			НовСтрока = НовСтрока + ТекСимв;
		КонецЕсли;
	КонецЦикла;

	Возврат НовСтрока;

КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// Вставить содержимое обработчика.   

КонецПроцедуры

&НаКлиенте
Процедура СортироватьВозр(Команда)
	ИмяКолонки = СтрЗаменить(Элементы.СписокГрупп.ТекущийЭлемент.Имя, Элементы.СписокГрупп.Имя, "");
	СписокГрупп.Сортировать(ИмяКолонки + " ВОЗР");
	УстановитьКолонкуДляСортировки(ИмяКолонки);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьУбыв(Команда)
	ИмяКолонки = СтрЗаменить(Элементы.СписокГрупп.ТекущийЭлемент.Имя, Элементы.СписокГрупп.Имя, "");
	СписокГрупп.Сортировать(ИмяКолонки + " УБЫВ");
	УстановитьКолонкуДляСортировки(ИмяКолонки);

КонецПроцедуры

&НаСервере
Процедура УстановитьКолонкуДляСортировки(ИмяКолонки)

	Константы.КолонкаСортировки.Установить(ИмяКолонки);

КонецПроцедуры